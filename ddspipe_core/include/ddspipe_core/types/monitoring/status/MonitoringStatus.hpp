// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file MonitoringStatus.hpp
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifndef FAST_DDS_GENERATED__MONITORINGSTATUS_HPP
#define FAST_DDS_GENERATED__MONITORINGSTATUS_HPP

#include <cstdint>
#include <utility>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(MONITORINGSTATUS_SOURCE)
#define MONITORINGSTATUS_DllAPI __declspec( dllexport )
#else
#define MONITORINGSTATUS_DllAPI __declspec( dllimport )
#endif // MONITORINGSTATUS_SOURCE
#else
#define MONITORINGSTATUS_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define MONITORINGSTATUS_DllAPI
#endif // _WIN32

/*!
 * @brief This class represents the structure MonitoringErrorStatus defined by the user in the IDL file.
 * @ingroup MonitoringStatus
 */
class MonitoringErrorStatus
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport MonitoringErrorStatus()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~MonitoringErrorStatus()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object MonitoringErrorStatus that will be copied.
     */
    eProsima_user_DllExport MonitoringErrorStatus(
            const MonitoringErrorStatus& x)
    {
                    m_type_mismatch = x.m_type_mismatch;

                    m_qos_mismatch = x.m_qos_mismatch;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object MonitoringErrorStatus that will be copied.
     */
    eProsima_user_DllExport MonitoringErrorStatus(
            MonitoringErrorStatus&& x) noexcept
    {
        m_type_mismatch = x.m_type_mismatch;
        m_qos_mismatch = x.m_qos_mismatch;
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object MonitoringErrorStatus that will be copied.
     */
    eProsima_user_DllExport MonitoringErrorStatus& operator =(
            const MonitoringErrorStatus& x)
    {

                    m_type_mismatch = x.m_type_mismatch;

                    m_qos_mismatch = x.m_qos_mismatch;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object MonitoringErrorStatus that will be copied.
     */
    eProsima_user_DllExport MonitoringErrorStatus& operator =(
            MonitoringErrorStatus&& x) noexcept
    {

        m_type_mismatch = x.m_type_mismatch;
        m_qos_mismatch = x.m_qos_mismatch;
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x MonitoringErrorStatus object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const MonitoringErrorStatus& x) const
    {
        return (m_type_mismatch == x.m_type_mismatch &&
           m_qos_mismatch == x.m_qos_mismatch);
    }

    /*!
     * @brief Comparison operator.
     * @param x MonitoringErrorStatus object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const MonitoringErrorStatus& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function sets a value in member type_mismatch
     * @param _type_mismatch New value for member type_mismatch
     */
    eProsima_user_DllExport void type_mismatch(
            bool _type_mismatch)
    {
        m_type_mismatch = _type_mismatch;
    }

    /*!
     * @brief This function returns the value of member type_mismatch
     * @return Value of member type_mismatch
     */
    eProsima_user_DllExport bool type_mismatch() const
    {
        return m_type_mismatch;
    }

    /*!
     * @brief This function returns a reference to member type_mismatch
     * @return Reference to member type_mismatch
     */
    eProsima_user_DllExport bool& type_mismatch()
    {
        return m_type_mismatch;
    }


    /*!
     * @brief This function sets a value in member qos_mismatch
     * @param _qos_mismatch New value for member qos_mismatch
     */
    eProsima_user_DllExport void qos_mismatch(
            bool _qos_mismatch)
    {
        m_qos_mismatch = _qos_mismatch;
    }

    /*!
     * @brief This function returns the value of member qos_mismatch
     * @return Value of member qos_mismatch
     */
    eProsima_user_DllExport bool qos_mismatch() const
    {
        return m_qos_mismatch;
    }

    /*!
     * @brief This function returns a reference to member qos_mismatch
     * @return Reference to member qos_mismatch
     */
    eProsima_user_DllExport bool& qos_mismatch()
    {
        return m_qos_mismatch;
    }



private:

    bool m_type_mismatch{false};
    bool m_qos_mismatch{false};

};
/*!
 * @brief This class represents the structure MonitoringStatus defined by the user in the IDL file.
 * @ingroup MonitoringStatus
 */
class MonitoringStatus
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport MonitoringStatus()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~MonitoringStatus()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object MonitoringStatus that will be copied.
     */
    eProsima_user_DllExport MonitoringStatus(
            const MonitoringStatus& x)
    {
                    m_error_status = x.m_error_status;

                    m_has_errors = x.m_has_errors;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object MonitoringStatus that will be copied.
     */
    eProsima_user_DllExport MonitoringStatus(
            MonitoringStatus&& x) noexcept
    {
        m_error_status = std::move(x.m_error_status);
        m_has_errors = x.m_has_errors;
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object MonitoringStatus that will be copied.
     */
    eProsima_user_DllExport MonitoringStatus& operator =(
            const MonitoringStatus& x)
    {

                    m_error_status = x.m_error_status;

                    m_has_errors = x.m_has_errors;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object MonitoringStatus that will be copied.
     */
    eProsima_user_DllExport MonitoringStatus& operator =(
            MonitoringStatus&& x) noexcept
    {

        m_error_status = std::move(x.m_error_status);
        m_has_errors = x.m_has_errors;
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x MonitoringStatus object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const MonitoringStatus& x) const
    {
        return (m_error_status == x.m_error_status &&
           m_has_errors == x.m_has_errors);
    }

    /*!
     * @brief Comparison operator.
     * @param x MonitoringStatus object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const MonitoringStatus& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function copies the value in member error_status
     * @param _error_status New value to be copied in member error_status
     */
    eProsima_user_DllExport void error_status(
            const MonitoringErrorStatus& _error_status)
    {
        m_error_status = _error_status;
    }

    /*!
     * @brief This function moves the value in member error_status
     * @param _error_status New value to be moved in member error_status
     */
    eProsima_user_DllExport void error_status(
            MonitoringErrorStatus&& _error_status)
    {
        m_error_status = std::move(_error_status);
    }

    /*!
     * @brief This function returns a constant reference to member error_status
     * @return Constant reference to member error_status
     */
    eProsima_user_DllExport const MonitoringErrorStatus& error_status() const
    {
        return m_error_status;
    }

    /*!
     * @brief This function returns a reference to member error_status
     * @return Reference to member error_status
     */
    eProsima_user_DllExport MonitoringErrorStatus& error_status()
    {
        return m_error_status;
    }


    /*!
     * @brief This function sets a value in member has_errors
     * @param _has_errors New value for member has_errors
     */
    eProsima_user_DllExport void has_errors(
            bool _has_errors)
    {
        m_has_errors = _has_errors;
    }

    /*!
     * @brief This function returns the value of member has_errors
     * @return Value of member has_errors
     */
    eProsima_user_DllExport bool has_errors() const
    {
        return m_has_errors;
    }

    /*!
     * @brief This function returns a reference to member has_errors
     * @return Reference to member has_errors
     */
    eProsima_user_DllExport bool& has_errors()
    {
        return m_has_errors;
    }



private:

    MonitoringErrorStatus m_error_status;
    bool m_has_errors{false};

};

#endif // _FAST_DDS_GENERATED_MONITORINGSTATUS_HPP_


