// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file MonitoringData.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#include <fastcdr/config.h>
#include "MonitoringDatav1.h"

#if FASTCDR_VERSION_MAJOR > 1

#ifndef _FAST_DDS_GENERATED_MONITORINGDATA_H_
#define _FAST_DDS_GENERATED_MONITORINGDATA_H_

#include <array>
#include <bitset>
#include <cstdint>
#include <map>
#include <string>
#include <vector>

#include <fastcdr/cdr/fixed_size_string.hpp>
#include <fastcdr/xcdr/external.hpp>
#include <fastcdr/xcdr/optional.hpp>



#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(MONITORINGDATA_SOURCE)
#define MONITORINGDATA_DllAPI __declspec( dllexport )
#else
#define MONITORINGDATA_DllAPI __declspec( dllimport )
#endif // MONITORINGDATA_SOURCE
#else
#define MONITORINGDATA_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define MONITORINGDATA_DllAPI
#endif // _WIN32

namespace eprosima {
namespace fastcdr {
class Cdr;
class CdrSizeCalculator;
} // namespace fastcdr
} // namespace eprosima





/*!
 * @brief This class represents the structure DdsTopicData defined by the user in the IDL file.
 * @ingroup MonitoringData
 */
class DdsTopicData
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport DdsTopicData();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~DdsTopicData();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object DdsTopicData that will be copied.
     */
    eProsima_user_DllExport DdsTopicData(
            const DdsTopicData& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object DdsTopicData that will be copied.
     */
    eProsima_user_DllExport DdsTopicData(
            DdsTopicData&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object DdsTopicData that will be copied.
     */
    eProsima_user_DllExport DdsTopicData& operator =(
            const DdsTopicData& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object DdsTopicData that will be copied.
     */
    eProsima_user_DllExport DdsTopicData& operator =(
            DdsTopicData&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x DdsTopicData object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const DdsTopicData& x) const;

    /*!
     * @brief Comparison operator.
     * @param x DdsTopicData object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const DdsTopicData& x) const;

    /*!
     * @brief This function copies the value in member participant_id
     * @param _participant_id New value to be copied in member participant_id
     */
    eProsima_user_DllExport void participant_id(
            const std::string& _participant_id);

    /*!
     * @brief This function moves the value in member participant_id
     * @param _participant_id New value to be moved in member participant_id
     */
    eProsima_user_DllExport void participant_id(
            std::string&& _participant_id);

    /*!
     * @brief This function returns a constant reference to member participant_id
     * @return Constant reference to member participant_id
     */
    eProsima_user_DllExport const std::string& participant_id() const;

    /*!
     * @brief This function returns a reference to member participant_id
     * @return Reference to member participant_id
     */
    eProsima_user_DllExport std::string& participant_id();


    /*!
     * @brief This function sets a value in member msgs_received
     * @param _msgs_received New value for member msgs_received
     */
    eProsima_user_DllExport void msgs_received(
            uint32_t _msgs_received);

    /*!
     * @brief This function returns the value of member msgs_received
     * @return Value of member msgs_received
     */
    eProsima_user_DllExport uint32_t msgs_received() const;

    /*!
     * @brief This function returns a reference to member msgs_received
     * @return Reference to member msgs_received
     */
    eProsima_user_DllExport uint32_t& msgs_received();


    /*!
     * @brief This function sets a value in member frequency
     * @param _frequency New value for member frequency
     */
    eProsima_user_DllExport void frequency(
            double _frequency);

    /*!
     * @brief This function returns the value of member frequency
     * @return Value of member frequency
     */
    eProsima_user_DllExport double frequency() const;

    /*!
     * @brief This function returns a reference to member frequency
     * @return Reference to member frequency
     */
    eProsima_user_DllExport double& frequency();

private:

    std::string m_participant_id;
    uint32_t m_msgs_received{0};
    double m_frequency{0.0};

};




/*!
 * @brief This class represents the structure DdsTopic defined by the user in the IDL file.
 * @ingroup MonitoringData
 */
class DdsTopic
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport DdsTopic();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~DdsTopic();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object DdsTopic that will be copied.
     */
    eProsima_user_DllExport DdsTopic(
            const DdsTopic& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object DdsTopic that will be copied.
     */
    eProsima_user_DllExport DdsTopic(
            DdsTopic&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object DdsTopic that will be copied.
     */
    eProsima_user_DllExport DdsTopic& operator =(
            const DdsTopic& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object DdsTopic that will be copied.
     */
    eProsima_user_DllExport DdsTopic& operator =(
            DdsTopic&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x DdsTopic object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const DdsTopic& x) const;

    /*!
     * @brief Comparison operator.
     * @param x DdsTopic object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const DdsTopic& x) const;

    /*!
     * @brief This function copies the value in member name
     * @param _name New value to be copied in member name
     */
    eProsima_user_DllExport void name(
            const std::string& _name);

    /*!
     * @brief This function moves the value in member name
     * @param _name New value to be moved in member name
     */
    eProsima_user_DllExport void name(
            std::string&& _name);

    /*!
     * @brief This function returns a constant reference to member name
     * @return Constant reference to member name
     */
    eProsima_user_DllExport const std::string& name() const;

    /*!
     * @brief This function returns a reference to member name
     * @return Reference to member name
     */
    eProsima_user_DllExport std::string& name();


    /*!
     * @brief This function copies the value in member data_type_name
     * @param _data_type_name New value to be copied in member data_type_name
     */
    eProsima_user_DllExport void data_type_name(
            const std::string& _data_type_name);

    /*!
     * @brief This function moves the value in member data_type_name
     * @param _data_type_name New value to be moved in member data_type_name
     */
    eProsima_user_DllExport void data_type_name(
            std::string&& _data_type_name);

    /*!
     * @brief This function returns a constant reference to member data_type_name
     * @return Constant reference to member data_type_name
     */
    eProsima_user_DllExport const std::string& data_type_name() const;

    /*!
     * @brief This function returns a reference to member data_type_name
     * @return Reference to member data_type_name
     */
    eProsima_user_DllExport std::string& data_type_name();


    /*!
     * @brief This function copies the value in member data
     * @param _data New value to be copied in member data
     */
    eProsima_user_DllExport void data(
            const std::vector<DdsTopicData>& _data);

    /*!
     * @brief This function moves the value in member data
     * @param _data New value to be moved in member data
     */
    eProsima_user_DllExport void data(
            std::vector<DdsTopicData>&& _data);

    /*!
     * @brief This function returns a constant reference to member data
     * @return Constant reference to member data
     */
    eProsima_user_DllExport const std::vector<DdsTopicData>& data() const;

    /*!
     * @brief This function returns a reference to member data
     * @return Reference to member data
     */
    eProsima_user_DllExport std::vector<DdsTopicData>& data();

private:

    std::string m_name;
    std::string m_data_type_name;
    std::vector<DdsTopicData> m_data;

};




/*!
 * @brief This class represents the structure MonitoringData defined by the user in the IDL file.
 * @ingroup MonitoringData
 */
class MonitoringData
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport MonitoringData();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~MonitoringData();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object MonitoringData that will be copied.
     */
    eProsima_user_DllExport MonitoringData(
            const MonitoringData& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object MonitoringData that will be copied.
     */
    eProsima_user_DllExport MonitoringData(
            MonitoringData&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object MonitoringData that will be copied.
     */
    eProsima_user_DllExport MonitoringData& operator =(
            const MonitoringData& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object MonitoringData that will be copied.
     */
    eProsima_user_DllExport MonitoringData& operator =(
            MonitoringData&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x MonitoringData object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const MonitoringData& x) const;

    /*!
     * @brief Comparison operator.
     * @param x MonitoringData object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const MonitoringData& x) const;

    /*!
     * @brief This function copies the value in member topics
     * @param _topics New value to be copied in member topics
     */
    eProsima_user_DllExport void topics(
            const std::vector<DdsTopic>& _topics);

    /*!
     * @brief This function moves the value in member topics
     * @param _topics New value to be moved in member topics
     */
    eProsima_user_DllExport void topics(
            std::vector<DdsTopic>&& _topics);

    /*!
     * @brief This function returns a constant reference to member topics
     * @return Constant reference to member topics
     */
    eProsima_user_DllExport const std::vector<DdsTopic>& topics() const;

    /*!
     * @brief This function returns a reference to member topics
     * @return Reference to member topics
     */
    eProsima_user_DllExport std::vector<DdsTopic>& topics();

private:

    std::vector<DdsTopic> m_topics;

};

#endif // _FAST_DDS_GENERATED_MONITORINGDATA_H_



#endif // FASTCDR_VERSION_MAJOR > 1
