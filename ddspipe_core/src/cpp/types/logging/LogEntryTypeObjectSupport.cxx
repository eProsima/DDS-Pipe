// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file LogEntryTypeObjectSupport.cxx
 * Source file containing the implementation to register the TypeObject representation of the described types in the IDL file
 *
 * This file was generated by the tool fastddsgen.
 */

#include <ddspipe_core/types/logging/LogEntryTypeObjectSupport.hpp>

#include <mutex>
#include <string>

#include <fastcdr/xcdr/external.hpp>
#include <fastcdr/xcdr/optional.hpp>
#include <fastdds/dds/domain/DomainParticipantFactory.hpp>
#include <fastdds/dds/log/Log.hpp>
#include <fastdds/dds/xtypes/common.hpp>
#include <fastdds/dds/xtypes/type_representation/ITypeObjectRegistry.hpp>
#include <fastdds/dds/xtypes/type_representation/TypeObject.hpp>
#include <fastdds/dds/xtypes/type_representation/TypeObjectUtils.hpp>

#include <ddspipe_core/types/logging/LogEntry.hpp>


using namespace eprosima::fastdds::dds::xtypes;

void register_LogEntry_type_objects()
{
    static std::once_flag once_flag;
    std::call_once(once_flag, []()
            {
                register_LogEntry_type_identifier();

            });
}

void register_LogEntry_type_identifier()
{
    {
        StructTypeFlag struct_flags_LogEntry = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                false, false);
        ReturnCode_t return_code_LogEntry;
        TypeIdentifierPair type_ids_LogEntry;
        QualifiedTypeName type_name_LogEntry = "LogEntry";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_LogEntry;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_LogEntry;
        CompleteTypeDetail detail_LogEntry = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_LogEntry, ann_custom_LogEntry, type_name_LogEntry.to_string());
        CompleteStructHeader header_LogEntry;
        header_LogEntry = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_LogEntry);
        CompleteStructMemberSeq member_seq_LogEntry;
        {
            return_code_LogEntry =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_int32_t", type_ids_LogEntry);

            if (return_code_LogEntry != eprosima::fastdds::dds::RETCODE_OK)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "event Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_event = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, true, false);
            CommonStructMember common_event;
            MemberId member_id_event = 0x00000000;
            if (EK_COMPLETE == type_ids_LogEntry.type_identifier1()._d() || TK_NONE == type_ids_LogEntry.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_LogEntry.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_LogEntry.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_LogEntry.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_LogEntry.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_LogEntry.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_LogEntry.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_LogEntry.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_LogEntry.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_LogEntry.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_LogEntry.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_LogEntry.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_LogEntry.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_LogEntry.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_LogEntry.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_event = TypeObjectUtils::build_common_struct_member(member_id_event, member_flags_event, type_ids_LogEntry.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_LogEntry.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_LogEntry.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_LogEntry.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_LogEntry.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_LogEntry.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_LogEntry.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_LogEntry.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_LogEntry.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_LogEntry.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_LogEntry.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_LogEntry.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_LogEntry.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_LogEntry.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_LogEntry.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_LogEntry.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_event = TypeObjectUtils::build_common_struct_member(member_id_event, member_flags_event, type_ids_LogEntry.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure event member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_event = "event";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_event;
            ann_custom_LogEntry.reset();
            AppliedAnnotationSeq tmp_ann_custom_event;
            eprosima::fastcdr::optional<std::string> unit_event;
            eprosima::fastcdr::optional<AnnotationParameterValue> min_event;
            eprosima::fastcdr::optional<AnnotationParameterValue> max_event;
            eprosima::fastcdr::optional<std::string> hash_id_event;
            if (unit_event.has_value() || min_event.has_value() || max_event.has_value() || hash_id_event.has_value())
            {
                member_ann_builtin_event = TypeObjectUtils::build_applied_builtin_member_annotations(unit_event, min_event, max_event, hash_id_event);
            }
            if (!tmp_ann_custom_event.empty())
            {
                ann_custom_LogEntry = tmp_ann_custom_event;
            }
            CompleteMemberDetail detail_event = TypeObjectUtils::build_complete_member_detail(name_event, member_ann_builtin_event, ann_custom_LogEntry);
            CompleteStructMember member_event = TypeObjectUtils::build_complete_struct_member(common_event, detail_event);
            TypeObjectUtils::add_complete_struct_member(member_seq_LogEntry, member_event);
        }
        {
            return_code_LogEntry =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "Kind", type_ids_LogEntry);

            if (return_code_LogEntry != eprosima::fastdds::dds::RETCODE_OK)
            {
                EnumTypeFlag enum_flags_Kind = 0;
                BitBound bit_bound_Kind = 32;
                CommonEnumeratedHeader common_Kind = TypeObjectUtils::build_common_enumerated_header(bit_bound_Kind);
                QualifiedTypeName type_name_Kind = "Kind";
                eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_Kind;
                eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_Kind;
                CompleteTypeDetail detail_Kind = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_Kind, ann_custom_Kind, type_name_Kind.to_string());
                CompleteEnumeratedHeader header_Kind = TypeObjectUtils::build_complete_enumerated_header(common_Kind, detail_Kind);
                CompleteEnumeratedLiteralSeq literal_seq_Kind;
                {
                    EnumeratedLiteralFlag flags_Info = TypeObjectUtils::build_enumerated_literal_flag(false);
                    CommonEnumeratedLiteral common_Info = TypeObjectUtils::build_common_enumerated_literal(0, flags_Info);
                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_Info;
                    ann_custom_Kind.reset();
                    MemberName name_Info = "Info";
                    CompleteMemberDetail detail_Info = TypeObjectUtils::build_complete_member_detail(name_Info, member_ann_builtin_Info, ann_custom_Kind);
                    CompleteEnumeratedLiteral literal_Info = TypeObjectUtils::build_complete_enumerated_literal(common_Info, detail_Info);
                    TypeObjectUtils::add_complete_enumerated_literal(literal_seq_Kind, literal_Info);
                }
                {
                    EnumeratedLiteralFlag flags_Warning = TypeObjectUtils::build_enumerated_literal_flag(false);
                    CommonEnumeratedLiteral common_Warning = TypeObjectUtils::build_common_enumerated_literal(1, flags_Warning);
                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_Warning;
                    ann_custom_Kind.reset();
                    MemberName name_Warning = "Warning";
                    CompleteMemberDetail detail_Warning = TypeObjectUtils::build_complete_member_detail(name_Warning, member_ann_builtin_Warning, ann_custom_Kind);
                    CompleteEnumeratedLiteral literal_Warning = TypeObjectUtils::build_complete_enumerated_literal(common_Warning, detail_Warning);
                    TypeObjectUtils::add_complete_enumerated_literal(literal_seq_Kind, literal_Warning);
                }
                {
                    EnumeratedLiteralFlag flags_Error = TypeObjectUtils::build_enumerated_literal_flag(false);
                    CommonEnumeratedLiteral common_Error = TypeObjectUtils::build_common_enumerated_literal(2, flags_Error);
                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_Error;
                    ann_custom_Kind.reset();
                    MemberName name_Error = "Error";
                    CompleteMemberDetail detail_Error = TypeObjectUtils::build_complete_member_detail(name_Error, member_ann_builtin_Error, ann_custom_Kind);
                    CompleteEnumeratedLiteral literal_Error = TypeObjectUtils::build_complete_enumerated_literal(common_Error, detail_Error);
                    TypeObjectUtils::add_complete_enumerated_literal(literal_seq_Kind, literal_Error);
                }
                CompleteEnumeratedType enumerated_type_Kind = TypeObjectUtils::build_complete_enumerated_type(enum_flags_Kind, header_Kind,
                        literal_seq_Kind);
                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                        TypeObjectUtils::build_and_register_enumerated_type_object(enumerated_type_Kind, type_name_Kind.to_string()))
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Kind already registered in TypeObjectRegistry for a different type.");
                }
                return_code_LogEntry =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "Kind", type_ids_LogEntry);
                if (return_code_LogEntry != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "Kind: Given Enum TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
            }
            StructMemberFlag member_flags_kind = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_kind;
            MemberId member_id_kind = 0x00000001;
            if (EK_COMPLETE == type_ids_LogEntry.type_identifier1()._d() || TK_NONE == type_ids_LogEntry.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_LogEntry.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_LogEntry.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_LogEntry.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_LogEntry.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_LogEntry.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_LogEntry.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_LogEntry.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_LogEntry.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_LogEntry.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_LogEntry.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_LogEntry.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_LogEntry.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_LogEntry.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_LogEntry.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_kind = TypeObjectUtils::build_common_struct_member(member_id_kind, member_flags_kind, type_ids_LogEntry.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_LogEntry.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_LogEntry.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_LogEntry.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_LogEntry.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_LogEntry.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_LogEntry.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_LogEntry.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_LogEntry.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_LogEntry.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_LogEntry.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_LogEntry.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_LogEntry.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_LogEntry.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_LogEntry.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_LogEntry.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_kind = TypeObjectUtils::build_common_struct_member(member_id_kind, member_flags_kind, type_ids_LogEntry.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure kind member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_kind = "kind";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_kind;
            ann_custom_LogEntry.reset();
            CompleteMemberDetail detail_kind = TypeObjectUtils::build_complete_member_detail(name_kind, member_ann_builtin_kind, ann_custom_LogEntry);
            CompleteStructMember member_kind = TypeObjectUtils::build_complete_struct_member(common_kind, detail_kind);
            TypeObjectUtils::add_complete_struct_member(member_seq_LogEntry, member_kind);
        }
        {
            return_code_LogEntry =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_string_unbounded", type_ids_LogEntry);

            if (return_code_LogEntry != eprosima::fastdds::dds::RETCODE_OK)
            {
                std::string type_id_kind_anonymous_string_unbounded("TI_STRING8_SMALL");
                if (type_id_kind_anonymous_string_unbounded == "TI_STRING8_SMALL")
                {
                    SBound bound = 0;
                    StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                            "anonymous_string_unbounded"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
                else if (type_id_kind_anonymous_string_unbounded == "TI_STRING8_LARGE")
                {
                    LBound bound = 255;
                    StringLTypeDefn string_ldefn = TypeObjectUtils::build_string_l_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_l_string_type_identifier(string_ldefn,
                            "anonymous_string_unbounded"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
                else
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_string_unbounded: Unknown String kind.");
                    return;
                }
                return_code_LogEntry =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_string_unbounded", type_ids_LogEntry);
                if (return_code_LogEntry != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_string_unbounded: Given String TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
            }
            StructMemberFlag member_flags_category = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_category;
            MemberId member_id_category = 0x00000002;
            if (EK_COMPLETE == type_ids_LogEntry.type_identifier1()._d() || TK_NONE == type_ids_LogEntry.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_LogEntry.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_LogEntry.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_LogEntry.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_LogEntry.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_LogEntry.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_LogEntry.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_LogEntry.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_LogEntry.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_LogEntry.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_LogEntry.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_LogEntry.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_LogEntry.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_LogEntry.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_LogEntry.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_category = TypeObjectUtils::build_common_struct_member(member_id_category, member_flags_category, type_ids_LogEntry.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_LogEntry.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_LogEntry.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_LogEntry.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_LogEntry.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_LogEntry.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_LogEntry.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_LogEntry.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_LogEntry.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_LogEntry.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_LogEntry.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_LogEntry.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_LogEntry.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_LogEntry.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_LogEntry.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_LogEntry.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_category = TypeObjectUtils::build_common_struct_member(member_id_category, member_flags_category, type_ids_LogEntry.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure category member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_category = "category";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_category;
            ann_custom_LogEntry.reset();
            CompleteMemberDetail detail_category = TypeObjectUtils::build_complete_member_detail(name_category, member_ann_builtin_category, ann_custom_LogEntry);
            CompleteStructMember member_category = TypeObjectUtils::build_complete_struct_member(common_category, detail_category);
            TypeObjectUtils::add_complete_struct_member(member_seq_LogEntry, member_category);
        }
        {
            return_code_LogEntry =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_string_unbounded", type_ids_LogEntry);

            if (return_code_LogEntry != eprosima::fastdds::dds::RETCODE_OK)
            {
                std::string type_id_kind_anonymous_string_unbounded("TI_STRING8_SMALL");
                if (type_id_kind_anonymous_string_unbounded == "TI_STRING8_SMALL")
                {
                    SBound bound = 0;
                    StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                            "anonymous_string_unbounded"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
                else if (type_id_kind_anonymous_string_unbounded == "TI_STRING8_LARGE")
                {
                    LBound bound = 255;
                    StringLTypeDefn string_ldefn = TypeObjectUtils::build_string_l_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_l_string_type_identifier(string_ldefn,
                            "anonymous_string_unbounded"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
                else
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_string_unbounded: Unknown String kind.");
                    return;
                }
                return_code_LogEntry =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_string_unbounded", type_ids_LogEntry);
                if (return_code_LogEntry != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_string_unbounded: Given String TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
            }
            StructMemberFlag member_flags_message = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_message;
            MemberId member_id_message = 0x00000003;
            if (EK_COMPLETE == type_ids_LogEntry.type_identifier1()._d() || TK_NONE == type_ids_LogEntry.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_LogEntry.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_LogEntry.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_LogEntry.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_LogEntry.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_LogEntry.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_LogEntry.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_LogEntry.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_LogEntry.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_LogEntry.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_LogEntry.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_LogEntry.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_LogEntry.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_LogEntry.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_LogEntry.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_message = TypeObjectUtils::build_common_struct_member(member_id_message, member_flags_message, type_ids_LogEntry.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_LogEntry.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_LogEntry.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_LogEntry.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_LogEntry.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_LogEntry.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_LogEntry.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_LogEntry.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_LogEntry.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_LogEntry.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_LogEntry.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_LogEntry.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_LogEntry.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_LogEntry.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_LogEntry.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_LogEntry.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_message = TypeObjectUtils::build_common_struct_member(member_id_message, member_flags_message, type_ids_LogEntry.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure message member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_message = "message";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_message;
            ann_custom_LogEntry.reset();
            CompleteMemberDetail detail_message = TypeObjectUtils::build_complete_member_detail(name_message, member_ann_builtin_message, ann_custom_LogEntry);
            CompleteStructMember member_message = TypeObjectUtils::build_complete_struct_member(common_message, detail_message);
            TypeObjectUtils::add_complete_struct_member(member_seq_LogEntry, member_message);
        }
        {
            return_code_LogEntry =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_string_unbounded", type_ids_LogEntry);

            if (return_code_LogEntry != eprosima::fastdds::dds::RETCODE_OK)
            {
                std::string type_id_kind_anonymous_string_unbounded("TI_STRING8_SMALL");
                if (type_id_kind_anonymous_string_unbounded == "TI_STRING8_SMALL")
                {
                    SBound bound = 0;
                    StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                            "anonymous_string_unbounded"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
                else if (type_id_kind_anonymous_string_unbounded == "TI_STRING8_LARGE")
                {
                    LBound bound = 255;
                    StringLTypeDefn string_ldefn = TypeObjectUtils::build_string_l_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_l_string_type_identifier(string_ldefn,
                            "anonymous_string_unbounded"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
                else
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_string_unbounded: Unknown String kind.");
                    return;
                }
                return_code_LogEntry =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_string_unbounded", type_ids_LogEntry);
                if (return_code_LogEntry != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_string_unbounded: Given String TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
            }
            StructMemberFlag member_flags_timestamp = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_timestamp;
            MemberId member_id_timestamp = 0x00000004;
            if (EK_COMPLETE == type_ids_LogEntry.type_identifier1()._d() || TK_NONE == type_ids_LogEntry.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_LogEntry.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_LogEntry.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_LogEntry.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_LogEntry.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_LogEntry.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_LogEntry.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_LogEntry.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_LogEntry.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_LogEntry.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_LogEntry.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_LogEntry.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_LogEntry.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_LogEntry.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_LogEntry.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_timestamp = TypeObjectUtils::build_common_struct_member(member_id_timestamp, member_flags_timestamp, type_ids_LogEntry.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_LogEntry.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_LogEntry.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_LogEntry.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_LogEntry.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_LogEntry.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_LogEntry.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_LogEntry.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_LogEntry.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_LogEntry.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_LogEntry.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_LogEntry.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_LogEntry.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_LogEntry.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_LogEntry.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_LogEntry.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_timestamp = TypeObjectUtils::build_common_struct_member(member_id_timestamp, member_flags_timestamp, type_ids_LogEntry.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure timestamp member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_timestamp = "timestamp";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_timestamp;
            ann_custom_LogEntry.reset();
            CompleteMemberDetail detail_timestamp = TypeObjectUtils::build_complete_member_detail(name_timestamp, member_ann_builtin_timestamp, ann_custom_LogEntry);
            CompleteStructMember member_timestamp = TypeObjectUtils::build_complete_struct_member(common_timestamp, detail_timestamp);
            TypeObjectUtils::add_complete_struct_member(member_seq_LogEntry, member_timestamp);
        }
        CompleteStructType struct_type_LogEntry = TypeObjectUtils::build_complete_struct_type(struct_flags_LogEntry, header_LogEntry, member_seq_LogEntry);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_LogEntry, type_name_LogEntry.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "LogEntry already registered in TypeObjectRegistry for a different type.");
        }
        return_code_LogEntry =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "LogEntry", type_ids_LogEntry);
        if (return_code_LogEntry != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "LogEntry: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}

