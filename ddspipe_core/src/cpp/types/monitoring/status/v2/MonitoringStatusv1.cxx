// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file MonitoringStatus.cpp
 * This source file contains the implementation of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include <ddspipe_core/types/monitoring/status/v2/MonitoringStatus.h>

#if FASTCDR_VERSION_MAJOR == 1

#include <fastcdr/Cdr.h>


#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

namespace helper {
namespace internal {

enum class Size
{
    UInt8,
    UInt16,
    UInt32,
    UInt64,
};

constexpr Size get_size(
        int s)
{
    return (s <= 8 ) ? Size::UInt8:
           (s <= 16) ? Size::UInt16:
           (s <= 32) ? Size::UInt32: Size::UInt64;
}

template<Size s>
struct FindTypeH;

template<>
struct FindTypeH<Size::UInt8>
{
    using type = std::uint8_t;
};

template<>
struct FindTypeH<Size::UInt16>
{
    using type = std::uint16_t;
};

template<>
struct FindTypeH<Size::UInt32>
{
    using type = std::uint32_t;
};

template<>
struct FindTypeH<Size::UInt64>
{
    using type = std::uint64_t;
};
} // namespace internal

template<int S>
struct FindType
{
    using type = typename internal::FindTypeH<internal::get_size(S)>::type;
};
} // namespace helper

#define MonitoringErrorStatus_max_cdr_typesize 6ULL;
#define MonitoringStatus_max_cdr_typesize 11ULL;




MonitoringErrorStatus::MonitoringErrorStatus()
{
    // boolean m_type_mismatch
    m_type_mismatch = false;
    // boolean m_qos_mismatch
    m_qos_mismatch = false;

}

MonitoringErrorStatus::~MonitoringErrorStatus()
{
}

MonitoringErrorStatus::MonitoringErrorStatus(
        const MonitoringErrorStatus& x)
{
    m_type_mismatch = x.m_type_mismatch;


    m_qos_mismatch = x.m_qos_mismatch;

}

MonitoringErrorStatus::MonitoringErrorStatus(
        MonitoringErrorStatus&& x) noexcept
{
    m_type_mismatch = x.m_type_mismatch;


    m_qos_mismatch = x.m_qos_mismatch;

}

MonitoringErrorStatus& MonitoringErrorStatus::operator =(
        const MonitoringErrorStatus& x)
{
    m_type_mismatch = x.m_type_mismatch;


    m_qos_mismatch = x.m_qos_mismatch;

    return *this;
}

MonitoringErrorStatus& MonitoringErrorStatus::operator =(
        MonitoringErrorStatus&& x) noexcept
{
    m_type_mismatch = x.m_type_mismatch;


    m_qos_mismatch = x.m_qos_mismatch;

    return *this;
}

bool MonitoringErrorStatus::operator ==(
        const MonitoringErrorStatus& x) const
{
    return (m_type_mismatch == x.m_type_mismatch &&
           m_qos_mismatch == x.m_qos_mismatch);
}

bool MonitoringErrorStatus::operator !=(
        const MonitoringErrorStatus& x) const
{
    return !(*this == x);
}

size_t MonitoringErrorStatus::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MonitoringErrorStatus_max_cdr_typesize;
}

size_t MonitoringErrorStatus::getCdrSerializedSize(
        const MonitoringErrorStatus& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;

    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    return current_alignment - initial_alignment;
}

void MonitoringErrorStatus::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{
    scdr << m_type_mismatch;

    scdr << m_qos_mismatch;

}

void MonitoringErrorStatus::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{
    dcdr >> m_type_mismatch;



    dcdr >> m_qos_mismatch;


}

bool MonitoringErrorStatus::isKeyDefined()
{
    return false;
}

void MonitoringErrorStatus::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}

/*!
 * @brief This function sets a value in member type_mismatch
 * @param _type_mismatch New value for member type_mismatch
 */
void MonitoringErrorStatus::type_mismatch(
        bool _type_mismatch)
{
    m_type_mismatch = _type_mismatch;
}

/*!
 * @brief This function returns the value of member type_mismatch
 * @return Value of member type_mismatch
 */
bool MonitoringErrorStatus::type_mismatch() const
{
    return m_type_mismatch;
}

/*!
 * @brief This function returns a reference to member type_mismatch
 * @return Reference to member type_mismatch
 */
bool& MonitoringErrorStatus::type_mismatch()
{
    return m_type_mismatch;
}

/*!
 * @brief This function sets a value in member qos_mismatch
 * @param _qos_mismatch New value for member qos_mismatch
 */
void MonitoringErrorStatus::qos_mismatch(
        bool _qos_mismatch)
{
    m_qos_mismatch = _qos_mismatch;
}

/*!
 * @brief This function returns the value of member qos_mismatch
 * @return Value of member qos_mismatch
 */
bool MonitoringErrorStatus::qos_mismatch() const
{
    return m_qos_mismatch;
}

/*!
 * @brief This function returns a reference to member qos_mismatch
 * @return Reference to member qos_mismatch
 */
bool& MonitoringErrorStatus::qos_mismatch()
{
    return m_qos_mismatch;
}

MonitoringStatus::MonitoringStatus()
{
    // MonitoringErrorStatus m_error_status

    // boolean m_has_errors
    m_has_errors = false;

}

MonitoringStatus::~MonitoringStatus()
{
}

MonitoringStatus::MonitoringStatus(
        const MonitoringStatus& x)
{
    m_error_status = x.m_error_status;


    m_has_errors = x.m_has_errors;

}

MonitoringStatus::MonitoringStatus(
        MonitoringStatus&& x) noexcept
{
    m_error_status = std::move(x.m_error_status);


    m_has_errors = x.m_has_errors;

}

MonitoringStatus& MonitoringStatus::operator =(
        const MonitoringStatus& x)
{
    m_error_status = x.m_error_status;


    m_has_errors = x.m_has_errors;

    return *this;
}

MonitoringStatus& MonitoringStatus::operator =(
        MonitoringStatus&& x) noexcept
{
    m_error_status = std::move(x.m_error_status);


    m_has_errors = x.m_has_errors;

    return *this;
}

bool MonitoringStatus::operator ==(
        const MonitoringStatus& x) const
{
    return (m_error_status == x.m_error_status &&
           m_has_errors == x.m_has_errors);
}

bool MonitoringStatus::operator !=(
        const MonitoringStatus& x) const
{
    return !(*this == x);
}

size_t MonitoringStatus::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MonitoringStatus_max_cdr_typesize;
}

size_t MonitoringStatus::getCdrSerializedSize(
        const MonitoringStatus& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;

    current_alignment += MonitoringErrorStatus::getCdrSerializedSize(data.error_status(), current_alignment);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    return current_alignment - initial_alignment;
}

void MonitoringStatus::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{
    scdr << m_error_status;

    scdr << m_has_errors;

}

void MonitoringStatus::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{
    dcdr >> m_error_status;



    dcdr >> m_has_errors;


}

bool MonitoringStatus::isKeyDefined()
{
    return false;
}

void MonitoringStatus::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}

/*!
 * @brief This function copies the value in member error_status
 * @param _error_status New value to be copied in member error_status
 */
void MonitoringStatus::error_status(
        const MonitoringErrorStatus& _error_status)
{
    m_error_status = _error_status;
}

/*!
 * @brief This function moves the value in member error_status
 * @param _error_status New value to be moved in member error_status
 */
void MonitoringStatus::error_status(
        MonitoringErrorStatus&& _error_status)
{
    m_error_status = std::move(_error_status);
}

/*!
 * @brief This function returns a constant reference to member error_status
 * @return Constant reference to member error_status
 */
const MonitoringErrorStatus& MonitoringStatus::error_status() const
{
    return m_error_status;
}

/*!
 * @brief This function returns a reference to member error_status
 * @return Reference to member error_status
 */
MonitoringErrorStatus& MonitoringStatus::error_status()
{
    return m_error_status;
}

/*!
 * @brief This function sets a value in member has_errors
 * @param _has_errors New value for member has_errors
 */
void MonitoringStatus::has_errors(
        bool _has_errors)
{
    m_has_errors = _has_errors;
}

/*!
 * @brief This function returns the value of member has_errors
 * @return Value of member has_errors
 */
bool MonitoringStatus::has_errors() const
{
    return m_has_errors;
}

/*!
 * @brief This function returns a reference to member has_errors
 * @return Reference to member has_errors
 */
bool& MonitoringStatus::has_errors()
{
    return m_has_errors;
}

#endif // FASTCDR_VERSION_MAJOR == 1
