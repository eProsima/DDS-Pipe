// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file complex_nested_arrays.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#include <fastcdr/config.h>
#include "complex_nested_arraysv1.h"

#if FASTCDR_VERSION_MAJOR > 1

#ifndef _FAST_DDS_GENERATED_COMPLEX_NESTED_ARRAYS_H_
#define _FAST_DDS_GENERATED_COMPLEX_NESTED_ARRAYS_H_

#include <array>
#include <bitset>
#include <cstdint>
#include <map>
#include <string>
#include <vector>

#include <fastcdr/cdr/fixed_size_string.hpp>
#include <fastcdr/xcdr/external.hpp>
#include <fastcdr/xcdr/optional.hpp>



#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(COMPLEX_NESTED_ARRAYS_SOURCE)
#define COMPLEX_NESTED_ARRAYS_DllAPI __declspec( dllexport )
#else
#define COMPLEX_NESTED_ARRAYS_DllAPI __declspec( dllimport )
#endif // COMPLEX_NESTED_ARRAYS_SOURCE
#else
#define COMPLEX_NESTED_ARRAYS_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define COMPLEX_NESTED_ARRAYS_DllAPI
#endif // _WIN32

namespace eprosima {
namespace fastcdr {
class Cdr;
class CdrSizeCalculator;
} // namespace fastcdr
} // namespace eprosima





/*!
 * @brief This class represents the structure ThirdLevelElement defined by the user in the IDL file.
 * @ingroup complex_nested_arrays
 */
class ThirdLevelElement
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport ThirdLevelElement();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~ThirdLevelElement();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object ThirdLevelElement that will be copied.
     */
    eProsima_user_DllExport ThirdLevelElement(
            const ThirdLevelElement& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object ThirdLevelElement that will be copied.
     */
    eProsima_user_DllExport ThirdLevelElement(
            ThirdLevelElement&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object ThirdLevelElement that will be copied.
     */
    eProsima_user_DllExport ThirdLevelElement& operator =(
            const ThirdLevelElement& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object ThirdLevelElement that will be copied.
     */
    eProsima_user_DllExport ThirdLevelElement& operator =(
            ThirdLevelElement&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x ThirdLevelElement object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const ThirdLevelElement& x) const;

    /*!
     * @brief Comparison operator.
     * @param x ThirdLevelElement object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const ThirdLevelElement& x) const;

    /*!
     * @brief This function sets a value in member x
     * @param _x New value for member x
     */
    eProsima_user_DllExport void x(
            double _x);

    /*!
     * @brief This function returns the value of member x
     * @return Value of member x
     */
    eProsima_user_DllExport double x() const;

    /*!
     * @brief This function returns a reference to member x
     * @return Reference to member x
     */
    eProsima_user_DllExport double& x();


    /*!
     * @brief This function sets a value in member y
     * @param _y New value for member y
     */
    eProsima_user_DllExport void y(
            double _y);

    /*!
     * @brief This function returns the value of member y
     * @return Value of member y
     */
    eProsima_user_DllExport double y() const;

    /*!
     * @brief This function returns a reference to member y
     * @return Reference to member y
     */
    eProsima_user_DllExport double& y();

private:

    double m_x{0.0};
    double m_y{0.0};

};




/*!
 * @brief This class represents the structure SecondLevelElement defined by the user in the IDL file.
 * @ingroup complex_nested_arrays
 */
class SecondLevelElement
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport SecondLevelElement();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~SecondLevelElement();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object SecondLevelElement that will be copied.
     */
    eProsima_user_DllExport SecondLevelElement(
            const SecondLevelElement& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object SecondLevelElement that will be copied.
     */
    eProsima_user_DllExport SecondLevelElement(
            SecondLevelElement&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object SecondLevelElement that will be copied.
     */
    eProsima_user_DllExport SecondLevelElement& operator =(
            const SecondLevelElement& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object SecondLevelElement that will be copied.
     */
    eProsima_user_DllExport SecondLevelElement& operator =(
            SecondLevelElement&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x SecondLevelElement object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const SecondLevelElement& x) const;

    /*!
     * @brief Comparison operator.
     * @param x SecondLevelElement object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const SecondLevelElement& x) const;

    /*!
     * @brief This function copies the value in member an_element_alone
     * @param _an_element_alone New value to be copied in member an_element_alone
     */
    eProsima_user_DllExport void an_element_alone(
            const ThirdLevelElement& _an_element_alone);

    /*!
     * @brief This function moves the value in member an_element_alone
     * @param _an_element_alone New value to be moved in member an_element_alone
     */
    eProsima_user_DllExport void an_element_alone(
            ThirdLevelElement&& _an_element_alone);

    /*!
     * @brief This function returns a constant reference to member an_element_alone
     * @return Constant reference to member an_element_alone
     */
    eProsima_user_DllExport const ThirdLevelElement& an_element_alone() const;

    /*!
     * @brief This function returns a reference to member an_element_alone
     * @return Reference to member an_element_alone
     */
    eProsima_user_DllExport ThirdLevelElement& an_element_alone();


    /*!
     * @brief This function copies the value in member a_limited_other_value
     * @param _a_limited_other_value New value to be copied in member a_limited_other_value
     */
    eProsima_user_DllExport void a_limited_other_value(
            const std::vector<ThirdLevelElement>& _a_limited_other_value);

    /*!
     * @brief This function moves the value in member a_limited_other_value
     * @param _a_limited_other_value New value to be moved in member a_limited_other_value
     */
    eProsima_user_DllExport void a_limited_other_value(
            std::vector<ThirdLevelElement>&& _a_limited_other_value);

    /*!
     * @brief This function returns a constant reference to member a_limited_other_value
     * @return Constant reference to member a_limited_other_value
     */
    eProsima_user_DllExport const std::vector<ThirdLevelElement>& a_limited_other_value() const;

    /*!
     * @brief This function returns a reference to member a_limited_other_value
     * @return Reference to member a_limited_other_value
     */
    eProsima_user_DllExport std::vector<ThirdLevelElement>& a_limited_other_value();

private:

    ThirdLevelElement m_an_element_alone;
    std::vector<ThirdLevelElement> m_a_limited_other_value;

};


/*!
 * @brief This class represents the structure FirstLevelElement defined by the user in the IDL file.
 * @ingroup complex_nested_arrays
 */
class FirstLevelElement
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport FirstLevelElement();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~FirstLevelElement();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object FirstLevelElement that will be copied.
     */
    eProsima_user_DllExport FirstLevelElement(
            const FirstLevelElement& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object FirstLevelElement that will be copied.
     */
    eProsima_user_DllExport FirstLevelElement(
            FirstLevelElement&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object FirstLevelElement that will be copied.
     */
    eProsima_user_DllExport FirstLevelElement& operator =(
            const FirstLevelElement& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object FirstLevelElement that will be copied.
     */
    eProsima_user_DllExport FirstLevelElement& operator =(
            FirstLevelElement&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x FirstLevelElement object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const FirstLevelElement& x) const;

    /*!
     * @brief Comparison operator.
     * @param x FirstLevelElement object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const FirstLevelElement& x) const;

    /*!
     * @brief This function copies the value in member useless_name
     * @param _useless_name New value to be copied in member useless_name
     */
    eProsima_user_DllExport void useless_name(
            const std::string& _useless_name);

    /*!
     * @brief This function moves the value in member useless_name
     * @param _useless_name New value to be moved in member useless_name
     */
    eProsima_user_DllExport void useless_name(
            std::string&& _useless_name);

    /*!
     * @brief This function returns a constant reference to member useless_name
     * @return Constant reference to member useless_name
     */
    eProsima_user_DllExport const std::string& useless_name() const;

    /*!
     * @brief This function returns a reference to member useless_name
     * @return Reference to member useless_name
     */
    eProsima_user_DllExport std::string& useless_name();


    /*!
     * @brief This function copies the value in member sub
     * @param _sub New value to be copied in member sub
     */
    eProsima_user_DllExport void sub(
            const std::vector<SecondLevelElement>& _sub);

    /*!
     * @brief This function moves the value in member sub
     * @param _sub New value to be moved in member sub
     */
    eProsima_user_DllExport void sub(
            std::vector<SecondLevelElement>&& _sub);

    /*!
     * @brief This function returns a constant reference to member sub
     * @return Constant reference to member sub
     */
    eProsima_user_DllExport const std::vector<SecondLevelElement>& sub() const;

    /*!
     * @brief This function returns a reference to member sub
     * @return Reference to member sub
     */
    eProsima_user_DllExport std::vector<SecondLevelElement>& sub();


    /*!
     * @brief This function copies the value in member an_element_alone
     * @param _an_element_alone New value to be copied in member an_element_alone
     */
    eProsima_user_DllExport void an_element_alone(
            const ThirdLevelElement& _an_element_alone);

    /*!
     * @brief This function moves the value in member an_element_alone
     * @param _an_element_alone New value to be moved in member an_element_alone
     */
    eProsima_user_DllExport void an_element_alone(
            ThirdLevelElement&& _an_element_alone);

    /*!
     * @brief This function returns a constant reference to member an_element_alone
     * @return Constant reference to member an_element_alone
     */
    eProsima_user_DllExport const ThirdLevelElement& an_element_alone() const;

    /*!
     * @brief This function returns a reference to member an_element_alone
     * @return Reference to member an_element_alone
     */
    eProsima_user_DllExport ThirdLevelElement& an_element_alone();

private:

    std::string m_useless_name;
    std::vector<SecondLevelElement> m_sub;
    ThirdLevelElement m_an_element_alone;

};


/*!
 * @brief This class represents the structure complex_nested_arrays defined by the user in the IDL file.
 * @ingroup complex_nested_arrays
 */
class complex_nested_arrays
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport complex_nested_arrays();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~complex_nested_arrays();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object complex_nested_arrays that will be copied.
     */
    eProsima_user_DllExport complex_nested_arrays(
            const complex_nested_arrays& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object complex_nested_arrays that will be copied.
     */
    eProsima_user_DllExport complex_nested_arrays(
            complex_nested_arrays&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object complex_nested_arrays that will be copied.
     */
    eProsima_user_DllExport complex_nested_arrays& operator =(
            const complex_nested_arrays& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object complex_nested_arrays that will be copied.
     */
    eProsima_user_DllExport complex_nested_arrays& operator =(
            complex_nested_arrays&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x complex_nested_arrays object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const complex_nested_arrays& x) const;

    /*!
     * @brief Comparison operator.
     * @param x complex_nested_arrays object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const complex_nested_arrays& x) const;

    /*!
     * @brief This function copies the value in member array_of_elements
     * @param _array_of_elements New value to be copied in member array_of_elements
     */
    eProsima_user_DllExport void array_of_elements(
            const std::array<FirstLevelElement, 3>& _array_of_elements);

    /*!
     * @brief This function moves the value in member array_of_elements
     * @param _array_of_elements New value to be moved in member array_of_elements
     */
    eProsima_user_DllExport void array_of_elements(
            std::array<FirstLevelElement, 3>&& _array_of_elements);

    /*!
     * @brief This function returns a constant reference to member array_of_elements
     * @return Constant reference to member array_of_elements
     */
    eProsima_user_DllExport const std::array<FirstLevelElement, 3>& array_of_elements() const;

    /*!
     * @brief This function returns a reference to member array_of_elements
     * @return Reference to member array_of_elements
     */
    eProsima_user_DllExport std::array<FirstLevelElement, 3>& array_of_elements();

private:

    std::array<FirstLevelElement, 3> m_array_of_elements;

};

#endif // _FAST_DDS_GENERATED_COMPLEX_NESTED_ARRAYS_H_



#endif // FASTCDR_VERSION_MAJOR > 1
