// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file map_struct.cpp
 * This source file contains the implementation of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "map_struct.h"

#if FASTCDR_VERSION_MAJOR > 1

#include "map_structTypeObject.h"

#include <fastcdr/Cdr.h>


#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>






map_struct::map_struct()
{
    // Just to register all known types
    registermap_structTypes();
}

map_struct::~map_struct()
{
}

map_struct::map_struct(
        const map_struct& x)
{
    m_my_map = x.m_my_map;
}

map_struct::map_struct(
        map_struct&& x) noexcept
{
    m_my_map = std::move(x.m_my_map);
}

map_struct& map_struct::operator =(
        const map_struct& x)
{

    m_my_map = x.m_my_map;
    return *this;
}

map_struct& map_struct::operator =(
        map_struct&& x) noexcept
{

    m_my_map = std::move(x.m_my_map);
    return *this;
}

bool map_struct::operator ==(
        const map_struct& x) const
{
    return (m_my_map == x.m_my_map);
}

bool map_struct::operator !=(
        const map_struct& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member my_map
 * @param _my_map New value to be copied in member my_map
 */
void map_struct::my_map(
        const std::map<std::string, bool>& _my_map)
{
    m_my_map = _my_map;
}

/*!
 * @brief This function moves the value in member my_map
 * @param _my_map New value to be moved in member my_map
 */
void map_struct::my_map(
        std::map<std::string, bool>&& _my_map)
{
    m_my_map = std::move(_my_map);
}

/*!
 * @brief This function returns a constant reference to member my_map
 * @return Constant reference to member my_map
 */
const std::map<std::string, bool>& map_struct::my_map() const
{
    return m_my_map;
}

/*!
 * @brief This function returns a reference to member my_map
 * @return Reference to member my_map
 */
std::map<std::string, bool>& map_struct::my_map()
{
    return m_my_map;
}


// Include auxiliary functions like for serializing/deserializing.
#include "map_structCdrAux.ipp"

#endif // FASTCDR_VERSION_MAJOR > 1
