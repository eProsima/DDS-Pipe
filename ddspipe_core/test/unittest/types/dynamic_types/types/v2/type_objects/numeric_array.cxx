// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file numeric_array.cpp
 * This source file contains the implementation of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "numeric_array.h"

#if FASTCDR_VERSION_MAJOR > 1

#include "numeric_arrayTypeObject.h"

#include <fastcdr/Cdr.h>


#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>




numeric_array::numeric_array()
{
    // Just to register all known types
    registernumeric_arrayTypes();
}

numeric_array::~numeric_array()
{
}

numeric_array::numeric_array(
        const numeric_array& x)
{
    m_points = x.m_points;
}

numeric_array::numeric_array(
        numeric_array&& x) noexcept
{
    m_points = std::move(x.m_points);
}

numeric_array& numeric_array::operator =(
        const numeric_array& x)
{

    m_points = x.m_points;
    return *this;
}

numeric_array& numeric_array::operator =(
        numeric_array&& x) noexcept
{

    m_points = std::move(x.m_points);
    return *this;
}

bool numeric_array::operator ==(
        const numeric_array& x) const
{
    return (m_points == x.m_points);
}

bool numeric_array::operator !=(
        const numeric_array& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member points
 * @param _points New value to be copied in member points
 */
void numeric_array::points(
        const std::array<int32_t, 3>& _points)
{
    m_points = _points;
}

/*!
 * @brief This function moves the value in member points
 * @param _points New value to be moved in member points
 */
void numeric_array::points(
        std::array<int32_t, 3>&& _points)
{
    m_points = std::move(_points);
}

/*!
 * @brief This function returns a constant reference to member points
 * @return Constant reference to member points
 */
const std::array<int32_t, 3>& numeric_array::points() const
{
    return m_points;
}

/*!
 * @brief This function returns a reference to member points
 * @return Reference to member points
 */
std::array<int32_t, 3>& numeric_array::points()
{
    return m_points;
}


// Include auxiliary functions like for serializing/deserializing.
#include "numeric_arrayCdrAux.ipp"

#endif // FASTCDR_VERSION_MAJOR > 1
