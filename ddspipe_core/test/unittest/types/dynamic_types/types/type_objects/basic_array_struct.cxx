// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file basic_array_struct.cpp
 * This source file contains the implementation of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "basic_array_struct.h"

#if FASTCDR_VERSION_MAJOR > 1

#include "basic_array_structTypeObject.h"

#include <fastcdr/Cdr.h>


#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>




TheOtherObjectInArray::TheOtherObjectInArray()
{
    // Just to register all known types
    registerbasic_array_structTypes();
}

TheOtherObjectInArray::~TheOtherObjectInArray()
{
}

TheOtherObjectInArray::TheOtherObjectInArray(
        const TheOtherObjectInArray& x)
{
    m_some_num = x.m_some_num;
    m_positive = x.m_positive;
}

TheOtherObjectInArray::TheOtherObjectInArray(
        TheOtherObjectInArray&& x) noexcept
{
    m_some_num = x.m_some_num;
    m_positive = x.m_positive;
}

TheOtherObjectInArray& TheOtherObjectInArray::operator =(
        const TheOtherObjectInArray& x)
{

    m_some_num = x.m_some_num;
    m_positive = x.m_positive;
    return *this;
}

TheOtherObjectInArray& TheOtherObjectInArray::operator =(
        TheOtherObjectInArray&& x) noexcept
{

    m_some_num = x.m_some_num;
    m_positive = x.m_positive;
    return *this;
}

bool TheOtherObjectInArray::operator ==(
        const TheOtherObjectInArray& x) const
{
    return (m_some_num == x.m_some_num &&
           m_positive == x.m_positive);
}

bool TheOtherObjectInArray::operator !=(
        const TheOtherObjectInArray& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function sets a value in member some_num
 * @param _some_num New value for member some_num
 */
void TheOtherObjectInArray::some_num(
        int32_t _some_num)
{
    m_some_num = _some_num;
}

/*!
 * @brief This function returns the value of member some_num
 * @return Value of member some_num
 */
int32_t TheOtherObjectInArray::some_num() const
{
    return m_some_num;
}

/*!
 * @brief This function returns a reference to member some_num
 * @return Reference to member some_num
 */
int32_t& TheOtherObjectInArray::some_num()
{
    return m_some_num;
}


/*!
 * @brief This function sets a value in member positive
 * @param _positive New value for member positive
 */
void TheOtherObjectInArray::positive(
        bool _positive)
{
    m_positive = _positive;
}

/*!
 * @brief This function returns the value of member positive
 * @return Value of member positive
 */
bool TheOtherObjectInArray::positive() const
{
    return m_positive;
}

/*!
 * @brief This function returns a reference to member positive
 * @return Reference to member positive
 */
bool& TheOtherObjectInArray::positive()
{
    return m_positive;
}




basic_array_struct::basic_array_struct()
{
    // Just to register all known types
    registerbasic_array_structTypes();
}

basic_array_struct::~basic_array_struct()
{
}

basic_array_struct::basic_array_struct(
        const basic_array_struct& x)
{
    m_index = x.m_index;
    m_sub_structs = x.m_sub_structs;
}

basic_array_struct::basic_array_struct(
        basic_array_struct&& x) noexcept
{
    m_index = x.m_index;
    m_sub_structs = std::move(x.m_sub_structs);
}

basic_array_struct& basic_array_struct::operator =(
        const basic_array_struct& x)
{

    m_index = x.m_index;
    m_sub_structs = x.m_sub_structs;
    return *this;
}

basic_array_struct& basic_array_struct::operator =(
        basic_array_struct&& x) noexcept
{

    m_index = x.m_index;
    m_sub_structs = std::move(x.m_sub_structs);
    return *this;
}

bool basic_array_struct::operator ==(
        const basic_array_struct& x) const
{
    return (m_index == x.m_index &&
           m_sub_structs == x.m_sub_structs);
}

bool basic_array_struct::operator !=(
        const basic_array_struct& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function sets a value in member index
 * @param _index New value for member index
 */
void basic_array_struct::index(
        uint32_t _index)
{
    m_index = _index;
}

/*!
 * @brief This function returns the value of member index
 * @return Value of member index
 */
uint32_t basic_array_struct::index() const
{
    return m_index;
}

/*!
 * @brief This function returns a reference to member index
 * @return Reference to member index
 */
uint32_t& basic_array_struct::index()
{
    return m_index;
}


/*!
 * @brief This function copies the value in member sub_structs
 * @param _sub_structs New value to be copied in member sub_structs
 */
void basic_array_struct::sub_structs(
        const std::array<TheOtherObjectInArray, 5>& _sub_structs)
{
    m_sub_structs = _sub_structs;
}

/*!
 * @brief This function moves the value in member sub_structs
 * @param _sub_structs New value to be moved in member sub_structs
 */
void basic_array_struct::sub_structs(
        std::array<TheOtherObjectInArray, 5>&& _sub_structs)
{
    m_sub_structs = std::move(_sub_structs);
}

/*!
 * @brief This function returns a constant reference to member sub_structs
 * @return Constant reference to member sub_structs
 */
const std::array<TheOtherObjectInArray, 5>& basic_array_struct::sub_structs() const
{
    return m_sub_structs;
}

/*!
 * @brief This function returns a reference to member sub_structs
 * @return Reference to member sub_structs
 */
std::array<TheOtherObjectInArray, 5>& basic_array_struct::sub_structs()
{
    return m_sub_structs;
}


// Include auxiliary functions like for serializing/deserializing.
#include "basic_array_structCdrAux.ipp"

#endif // FASTCDR_VERSION_MAJOR > 1
