// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file union_struct.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#include <fastcdr/config.h>

#if FASTCDR_VERSION_MAJOR == 1

#ifndef _FAST_DDS_GENERATED_UNION_STRUCT_H_
#define _FAST_DDS_GENERATED_UNION_STRUCT_H_


#include <fastrtps/utils/fixed_size_string.hpp>

#include <stdint.h>
#include <array>
#include <string>
#include <vector>
#include <map>
#include <bitset>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(UNION_STRUCT_SOURCE)
#define UNION_STRUCT_DllAPI __declspec( dllexport )
#else
#define UNION_STRUCT_DllAPI __declspec( dllimport )
#endif // UNION_STRUCT_SOURCE
#else
#define UNION_STRUCT_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define UNION_STRUCT_DllAPI
#endif // _WIN32

namespace eprosima {
namespace fastcdr {
class Cdr;
} // namespace fastcdr
} // namespace eprosima





/*!
 * @brief This class represents the union MyUnion defined by the user in the IDL file.
 * @ingroup union_struct
 */
class MyUnion
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport MyUnion();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~MyUnion();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object MyUnion that will be copied.
     */
    eProsima_user_DllExport MyUnion(
            const MyUnion& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object MyUnion that will be copied.
     */
    eProsima_user_DllExport MyUnion(
            MyUnion&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object MyUnion that will be copied.
     */
    eProsima_user_DllExport MyUnion& operator =(
            const MyUnion& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object MyUnion that will be copied.
     */
    eProsima_user_DllExport MyUnion& operator =(
            MyUnion&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x MyUnion object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const MyUnion& x) const;

    /*!
     * @brief Comparison operator.
     * @param x MyUnion object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const MyUnion& x) const;

    /*!
     * @brief This function sets the discriminator value.
     * @param __d New value for the discriminator.
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the new value doesn't correspond to the selected union member.
     */
    eProsima_user_DllExport void _d(
            int32_t __d);

    /*!
     * @brief This function returns the value of the discriminator.
     * @return Value of the discriminator
     */
    eProsima_user_DllExport int32_t _d() const;

    /*!
     * @brief This function returns a reference to the discriminator.
     * @return Reference to the discriminator.
     */
    eProsima_user_DllExport int32_t& _d();

    /*!
     * @brief This function sets a value in member octet_value
     * @param _octet_value New value for member octet_value
     */
    eProsima_user_DllExport void octet_value(
            uint8_t _octet_value);

    /*!
     * @brief This function returns the value of member octet_value
     * @return Value of member octet_value
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport uint8_t octet_value() const;

    /*!
     * @brief This function returns a reference to member octet_value
     * @return Reference to member octet_value
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport uint8_t& octet_value();


    /*!
     * @brief This function sets a value in member long_value
     * @param _long_value New value for member long_value
     */
    eProsima_user_DllExport void long_value(
            int32_t _long_value);

    /*!
     * @brief This function returns the value of member long_value
     * @return Value of member long_value
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport int32_t long_value() const;

    /*!
     * @brief This function returns a reference to member long_value
     * @return Reference to member long_value
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport int32_t& long_value();


    /*!
     * @brief This function copies the value in member string_value
     * @param _string_value New value to be copied in member string_value
     */
    eProsima_user_DllExport void string_value(
            const std::string& _string_value);

    /*!
     * @brief This function moves the value in member string_value
     * @param _string_value New value to be moved in member string_value
     */
    eProsima_user_DllExport void string_value(
            std::string&& _string_value);

    /*!
     * @brief This function returns a constant reference to member string_value
     * @return Constant reference to member string_value
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport const std::string& string_value() const;

    /*!
     * @brief This function returns a reference to member string_value
     * @return Reference to member string_value
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport std::string& string_value();


    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const MyUnion& data,
            size_t current_alignment = 0);



    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);





private:

    int32_t m__d;

    uint8_t m_octet_value;
    int32_t m_long_value;
    std::string m_string_value;
};



/*!
 * @brief This class represents the structure union_struct defined by the user in the IDL file.
 * @ingroup union_struct
 */
class union_struct
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport union_struct();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~union_struct();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object union_struct that will be copied.
     */
    eProsima_user_DllExport union_struct(
            const union_struct& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object union_struct that will be copied.
     */
    eProsima_user_DllExport union_struct(
            union_struct&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object union_struct that will be copied.
     */
    eProsima_user_DllExport union_struct& operator =(
            const union_struct& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object union_struct that will be copied.
     */
    eProsima_user_DllExport union_struct& operator =(
            union_struct&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x union_struct object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const union_struct& x) const;

    /*!
     * @brief Comparison operator.
     * @param x union_struct object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const union_struct& x) const;

    /*!
     * @brief This function sets a value in member index
     * @param _index New value for member index
     */
    eProsima_user_DllExport void index(
            uint32_t _index);

    /*!
     * @brief This function returns the value of member index
     * @return Value of member index
     */
    eProsima_user_DllExport uint32_t index() const;

    /*!
     * @brief This function returns a reference to member index
     * @return Reference to member index
     */
    eProsima_user_DllExport uint32_t& index();


    /*!
     * @brief This function copies the value in member union_value
     * @param _union_value New value to be copied in member union_value
     */
    eProsima_user_DllExport void union_value(
            const MyUnion& _union_value);

    /*!
     * @brief This function moves the value in member union_value
     * @param _union_value New value to be moved in member union_value
     */
    eProsima_user_DllExport void union_value(
            MyUnion&& _union_value);

    /*!
     * @brief This function returns a constant reference to member union_value
     * @return Constant reference to member union_value
     */
    eProsima_user_DllExport const MyUnion& union_value() const;

    /*!
     * @brief This function returns a reference to member union_value
     * @return Reference to member union_value
     */
    eProsima_user_DllExport MyUnion& union_value();


    /*!
    * @brief This function returns the maximum serialized size of an object
    * depending on the buffer alignment.
    * @param current_alignment Buffer alignment.
    * @return Maximum serialized size.
    */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const union_struct& data,
            size_t current_alignment = 0);



    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);




    /*!
    * @brief This function tells you if the Key has been defined for this type
    */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
    * @brief This function serializes the key members of an object using CDR serialization.
    * @param cdr CDR serialization object.
    */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;


private:

    uint32_t m_index;
    MyUnion m_union_value;

};


#endif // _FAST_DDS_GENERATED_UNION_STRUCT_H_



#endif // FASTCDR_VERSION_MAJOR == 1
