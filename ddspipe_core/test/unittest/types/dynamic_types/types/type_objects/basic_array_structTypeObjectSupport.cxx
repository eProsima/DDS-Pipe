// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file basic_array_structTypeObjectSupport.cxx
 * Source file containing the implementation to register the TypeObject representation of the described types in the IDL file
 *
 * This file was generated by the tool fastddsgen.
 */

#include "basic_array_structTypeObjectSupport.hpp"

#include <mutex>
#include <string>

#include <fastcdr/xcdr/external.hpp>
#include <fastcdr/xcdr/optional.hpp>
#include <fastdds/dds/domain/DomainParticipantFactory.hpp>
#include <fastdds/dds/log/Log.hpp>
#include <fastdds/dds/xtypes/common.hpp>
#include <fastdds/dds/xtypes/type_representation/ITypeObjectRegistry.hpp>
#include <fastdds/dds/xtypes/type_representation/TypeObject.hpp>
#include <fastdds/dds/xtypes/type_representation/TypeObjectUtils.hpp>

#include "basic_array_struct.hpp"


using namespace eprosima::fastdds::dds::xtypes;

void register_basic_array_struct_type_objects()
{
    static std::once_flag once_flag;
    std::call_once(once_flag, []()
            {
                register_TheOtherObjectInArray_type_identifier();

                register_basic_array_struct_type_identifier();

            });
}

void register_TheOtherObjectInArray_type_identifier()
{
    {
        StructTypeFlag struct_flags_TheOtherObjectInArray = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                false, false);
        ReturnCode_t return_code_TheOtherObjectInArray;
        TypeIdentifierPair type_ids_TheOtherObjectInArray;
        QualifiedTypeName type_name_TheOtherObjectInArray = "TheOtherObjectInArray";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_TheOtherObjectInArray;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_TheOtherObjectInArray;
        CompleteTypeDetail detail_TheOtherObjectInArray = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_TheOtherObjectInArray, ann_custom_TheOtherObjectInArray, type_name_TheOtherObjectInArray.to_string());
        CompleteStructHeader header_TheOtherObjectInArray;
        header_TheOtherObjectInArray = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_TheOtherObjectInArray);
        CompleteStructMemberSeq member_seq_TheOtherObjectInArray;
        {
            return_code_TheOtherObjectInArray =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_int32_t", type_ids_TheOtherObjectInArray);

            if (return_code_TheOtherObjectInArray != eprosima::fastdds::dds::RETCODE_OK)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "some_num Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_some_num = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_some_num;
            MemberId member_id_some_num = 0x00000000;
            if (EK_COMPLETE == type_ids_TheOtherObjectInArray.type_identifier1()._d() || TK_NONE == type_ids_TheOtherObjectInArray.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_TheOtherObjectInArray.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_TheOtherObjectInArray.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_TheOtherObjectInArray.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_TheOtherObjectInArray.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_TheOtherObjectInArray.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_TheOtherObjectInArray.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_TheOtherObjectInArray.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_TheOtherObjectInArray.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_TheOtherObjectInArray.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_TheOtherObjectInArray.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_TheOtherObjectInArray.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_TheOtherObjectInArray.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_TheOtherObjectInArray.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_TheOtherObjectInArray.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_some_num = TypeObjectUtils::build_common_struct_member(member_id_some_num, member_flags_some_num, type_ids_TheOtherObjectInArray.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_TheOtherObjectInArray.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_TheOtherObjectInArray.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_TheOtherObjectInArray.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_TheOtherObjectInArray.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_TheOtherObjectInArray.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_TheOtherObjectInArray.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_TheOtherObjectInArray.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_TheOtherObjectInArray.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_TheOtherObjectInArray.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_TheOtherObjectInArray.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_TheOtherObjectInArray.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_TheOtherObjectInArray.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_TheOtherObjectInArray.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_TheOtherObjectInArray.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_TheOtherObjectInArray.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_some_num = TypeObjectUtils::build_common_struct_member(member_id_some_num, member_flags_some_num, type_ids_TheOtherObjectInArray.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure some_num member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_some_num = "some_num";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_some_num;
            ann_custom_TheOtherObjectInArray.reset();
            CompleteMemberDetail detail_some_num = TypeObjectUtils::build_complete_member_detail(name_some_num, member_ann_builtin_some_num, ann_custom_TheOtherObjectInArray);
            CompleteStructMember member_some_num = TypeObjectUtils::build_complete_struct_member(common_some_num, detail_some_num);
            TypeObjectUtils::add_complete_struct_member(member_seq_TheOtherObjectInArray, member_some_num);
        }
        {
            return_code_TheOtherObjectInArray =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_bool", type_ids_TheOtherObjectInArray);

            if (return_code_TheOtherObjectInArray != eprosima::fastdds::dds::RETCODE_OK)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "positive Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_positive = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_positive;
            MemberId member_id_positive = 0x00000001;
            if (EK_COMPLETE == type_ids_TheOtherObjectInArray.type_identifier1()._d() || TK_NONE == type_ids_TheOtherObjectInArray.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_TheOtherObjectInArray.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_TheOtherObjectInArray.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_TheOtherObjectInArray.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_TheOtherObjectInArray.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_TheOtherObjectInArray.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_TheOtherObjectInArray.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_TheOtherObjectInArray.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_TheOtherObjectInArray.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_TheOtherObjectInArray.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_TheOtherObjectInArray.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_TheOtherObjectInArray.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_TheOtherObjectInArray.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_TheOtherObjectInArray.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_TheOtherObjectInArray.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_positive = TypeObjectUtils::build_common_struct_member(member_id_positive, member_flags_positive, type_ids_TheOtherObjectInArray.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_TheOtherObjectInArray.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_TheOtherObjectInArray.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_TheOtherObjectInArray.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_TheOtherObjectInArray.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_TheOtherObjectInArray.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_TheOtherObjectInArray.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_TheOtherObjectInArray.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_TheOtherObjectInArray.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_TheOtherObjectInArray.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_TheOtherObjectInArray.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_TheOtherObjectInArray.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_TheOtherObjectInArray.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_TheOtherObjectInArray.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_TheOtherObjectInArray.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_TheOtherObjectInArray.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_positive = TypeObjectUtils::build_common_struct_member(member_id_positive, member_flags_positive, type_ids_TheOtherObjectInArray.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure positive member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_positive = "positive";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_positive;
            ann_custom_TheOtherObjectInArray.reset();
            CompleteMemberDetail detail_positive = TypeObjectUtils::build_complete_member_detail(name_positive, member_ann_builtin_positive, ann_custom_TheOtherObjectInArray);
            CompleteStructMember member_positive = TypeObjectUtils::build_complete_struct_member(common_positive, detail_positive);
            TypeObjectUtils::add_complete_struct_member(member_seq_TheOtherObjectInArray, member_positive);
        }
        CompleteStructType struct_type_TheOtherObjectInArray = TypeObjectUtils::build_complete_struct_type(struct_flags_TheOtherObjectInArray, header_TheOtherObjectInArray, member_seq_TheOtherObjectInArray);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_TheOtherObjectInArray, type_name_TheOtherObjectInArray.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "TheOtherObjectInArray already registered in TypeObjectRegistry for a different type.");
        }
        return_code_TheOtherObjectInArray =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "TheOtherObjectInArray", type_ids_TheOtherObjectInArray);
        if (return_code_TheOtherObjectInArray != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "TheOtherObjectInArray: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}
void register_basic_array_struct_type_identifier()
{
    {
        StructTypeFlag struct_flags_basic_array_struct = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                false, false);
        ReturnCode_t return_code_basic_array_struct;
        TypeIdentifierPair type_ids_basic_array_struct;
        QualifiedTypeName type_name_basic_array_struct = "basic_array_struct";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_basic_array_struct;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_basic_array_struct;
        CompleteTypeDetail detail_basic_array_struct = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_basic_array_struct, ann_custom_basic_array_struct, type_name_basic_array_struct.to_string());
        CompleteStructHeader header_basic_array_struct;
        header_basic_array_struct = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_basic_array_struct);
        CompleteStructMemberSeq member_seq_basic_array_struct;
        {
            return_code_basic_array_struct =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_uint32_t", type_ids_basic_array_struct);

            if (return_code_basic_array_struct != eprosima::fastdds::dds::RETCODE_OK)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "index Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_index = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_index;
            MemberId member_id_index = 0x00000000;
            if (EK_COMPLETE == type_ids_basic_array_struct.type_identifier1()._d() || TK_NONE == type_ids_basic_array_struct.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_basic_array_struct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_basic_array_struct.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_basic_array_struct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_basic_array_struct.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_basic_array_struct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_basic_array_struct.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_basic_array_struct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_basic_array_struct.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_basic_array_struct.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_basic_array_struct.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_basic_array_struct.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_basic_array_struct.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_basic_array_struct.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_basic_array_struct.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_index = TypeObjectUtils::build_common_struct_member(member_id_index, member_flags_index, type_ids_basic_array_struct.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_basic_array_struct.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_basic_array_struct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_basic_array_struct.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_basic_array_struct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_basic_array_struct.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_basic_array_struct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_basic_array_struct.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_basic_array_struct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_basic_array_struct.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_basic_array_struct.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_basic_array_struct.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_basic_array_struct.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_basic_array_struct.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_basic_array_struct.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_basic_array_struct.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_index = TypeObjectUtils::build_common_struct_member(member_id_index, member_flags_index, type_ids_basic_array_struct.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure index member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_index = "index";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_index;
            ann_custom_basic_array_struct.reset();
            CompleteMemberDetail detail_index = TypeObjectUtils::build_complete_member_detail(name_index, member_ann_builtin_index, ann_custom_basic_array_struct);
            CompleteStructMember member_index = TypeObjectUtils::build_complete_struct_member(common_index, detail_index);
            TypeObjectUtils::add_complete_struct_member(member_seq_basic_array_struct, member_index);
        }
        {
            return_code_basic_array_struct =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_array_TheOtherObjectInArray_5", type_ids_basic_array_struct);

            if (return_code_basic_array_struct != eprosima::fastdds::dds::RETCODE_OK)
            {
                return_code_basic_array_struct =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "TheOtherObjectInArray", type_ids_basic_array_struct);

                if (return_code_basic_array_struct != eprosima::fastdds::dds::RETCODE_OK)
                {
                    {
                        StructTypeFlag struct_flags_TheOtherObjectInArray = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                                false, false);
                        ReturnCode_t return_code_TheOtherObjectInArray;
                        TypeIdentifierPair type_ids_TheOtherObjectInArray;
                        QualifiedTypeName type_name_TheOtherObjectInArray = "TheOtherObjectInArray";
                        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_TheOtherObjectInArray;
                        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_TheOtherObjectInArray;
                        CompleteTypeDetail detail_TheOtherObjectInArray = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_TheOtherObjectInArray, ann_custom_TheOtherObjectInArray, type_name_TheOtherObjectInArray.to_string());
                        CompleteStructHeader header_TheOtherObjectInArray;
                        header_TheOtherObjectInArray = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_TheOtherObjectInArray);
                        CompleteStructMemberSeq member_seq_TheOtherObjectInArray;
                        {
                            return_code_TheOtherObjectInArray =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "_int32_t", type_ids_TheOtherObjectInArray);

                            if (return_code_TheOtherObjectInArray != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "some_num Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                return;
                            }
                            StructMemberFlag member_flags_some_num = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                    false, false, false, false);
                            CommonStructMember common_some_num;
                            MemberId member_id_some_num = 0x00000000;
                            if (EK_COMPLETE == type_ids_TheOtherObjectInArray.type_identifier1()._d() || TK_NONE == type_ids_TheOtherObjectInArray.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_TheOtherObjectInArray.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_TheOtherObjectInArray.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_TheOtherObjectInArray.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_TheOtherObjectInArray.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids_TheOtherObjectInArray.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_TheOtherObjectInArray.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids_TheOtherObjectInArray.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_TheOtherObjectInArray.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids_TheOtherObjectInArray.type_identifier1()._d() &&
                                    (EK_COMPLETE == type_ids_TheOtherObjectInArray.type_identifier1().map_sdefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_TheOtherObjectInArray.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids_TheOtherObjectInArray.type_identifier1()._d() &&
                                    (EK_COMPLETE == type_ids_TheOtherObjectInArray.type_identifier1().map_ldefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_TheOtherObjectInArray.type_identifier1().map_ldefn().key_identifier()->_d())))
                            {
                                common_some_num = TypeObjectUtils::build_common_struct_member(member_id_some_num, member_flags_some_num, type_ids_TheOtherObjectInArray.type_identifier1());
                            }
                            else if (EK_COMPLETE == type_ids_TheOtherObjectInArray.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_TheOtherObjectInArray.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_TheOtherObjectInArray.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_TheOtherObjectInArray.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_TheOtherObjectInArray.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids_TheOtherObjectInArray.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_TheOtherObjectInArray.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids_TheOtherObjectInArray.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_TheOtherObjectInArray.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids_TheOtherObjectInArray.type_identifier2()._d() &&
                                    (EK_COMPLETE == type_ids_TheOtherObjectInArray.type_identifier2().map_sdefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_TheOtherObjectInArray.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids_TheOtherObjectInArray.type_identifier2()._d() &&
                                    (EK_COMPLETE == type_ids_TheOtherObjectInArray.type_identifier2().map_ldefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_TheOtherObjectInArray.type_identifier2().map_ldefn().key_identifier()->_d())))
                            {
                                common_some_num = TypeObjectUtils::build_common_struct_member(member_id_some_num, member_flags_some_num, type_ids_TheOtherObjectInArray.type_identifier2());
                            }
                            else
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "Structure some_num member TypeIdentifier inconsistent.");
                                return;
                            }
                            MemberName name_some_num = "some_num";
                            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_some_num;
                            ann_custom_TheOtherObjectInArray.reset();
                            CompleteMemberDetail detail_some_num = TypeObjectUtils::build_complete_member_detail(name_some_num, member_ann_builtin_some_num, ann_custom_TheOtherObjectInArray);
                            CompleteStructMember member_some_num = TypeObjectUtils::build_complete_struct_member(common_some_num, detail_some_num);
                            TypeObjectUtils::add_complete_struct_member(member_seq_TheOtherObjectInArray, member_some_num);
                        }
                        {
                            return_code_TheOtherObjectInArray =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "_bool", type_ids_TheOtherObjectInArray);

                            if (return_code_TheOtherObjectInArray != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "positive Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                return;
                            }
                            StructMemberFlag member_flags_positive = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                    false, false, false, false);
                            CommonStructMember common_positive;
                            MemberId member_id_positive = 0x00000001;
                            if (EK_COMPLETE == type_ids_TheOtherObjectInArray.type_identifier1()._d() || TK_NONE == type_ids_TheOtherObjectInArray.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_TheOtherObjectInArray.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_TheOtherObjectInArray.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_TheOtherObjectInArray.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_TheOtherObjectInArray.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids_TheOtherObjectInArray.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_TheOtherObjectInArray.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids_TheOtherObjectInArray.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_TheOtherObjectInArray.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids_TheOtherObjectInArray.type_identifier1()._d() &&
                                    (EK_COMPLETE == type_ids_TheOtherObjectInArray.type_identifier1().map_sdefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_TheOtherObjectInArray.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids_TheOtherObjectInArray.type_identifier1()._d() &&
                                    (EK_COMPLETE == type_ids_TheOtherObjectInArray.type_identifier1().map_ldefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_TheOtherObjectInArray.type_identifier1().map_ldefn().key_identifier()->_d())))
                            {
                                common_positive = TypeObjectUtils::build_common_struct_member(member_id_positive, member_flags_positive, type_ids_TheOtherObjectInArray.type_identifier1());
                            }
                            else if (EK_COMPLETE == type_ids_TheOtherObjectInArray.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_TheOtherObjectInArray.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_TheOtherObjectInArray.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_TheOtherObjectInArray.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_TheOtherObjectInArray.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids_TheOtherObjectInArray.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_TheOtherObjectInArray.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids_TheOtherObjectInArray.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_TheOtherObjectInArray.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids_TheOtherObjectInArray.type_identifier2()._d() &&
                                    (EK_COMPLETE == type_ids_TheOtherObjectInArray.type_identifier2().map_sdefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_TheOtherObjectInArray.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids_TheOtherObjectInArray.type_identifier2()._d() &&
                                    (EK_COMPLETE == type_ids_TheOtherObjectInArray.type_identifier2().map_ldefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_TheOtherObjectInArray.type_identifier2().map_ldefn().key_identifier()->_d())))
                            {
                                common_positive = TypeObjectUtils::build_common_struct_member(member_id_positive, member_flags_positive, type_ids_TheOtherObjectInArray.type_identifier2());
                            }
                            else
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "Structure positive member TypeIdentifier inconsistent.");
                                return;
                            }
                            MemberName name_positive = "positive";
                            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_positive;
                            ann_custom_TheOtherObjectInArray.reset();
                            CompleteMemberDetail detail_positive = TypeObjectUtils::build_complete_member_detail(name_positive, member_ann_builtin_positive, ann_custom_TheOtherObjectInArray);
                            CompleteStructMember member_positive = TypeObjectUtils::build_complete_struct_member(common_positive, detail_positive);
                            TypeObjectUtils::add_complete_struct_member(member_seq_TheOtherObjectInArray, member_positive);
                        }
                        CompleteStructType struct_type_TheOtherObjectInArray = TypeObjectUtils::build_complete_struct_type(struct_flags_TheOtherObjectInArray, header_TheOtherObjectInArray, member_seq_TheOtherObjectInArray);
                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                TypeObjectUtils::build_and_register_struct_type_object(struct_type_TheOtherObjectInArray, type_name_TheOtherObjectInArray.to_string()))
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "TheOtherObjectInArray already registered in TypeObjectRegistry for a different type.");
                        }
                        return_code_TheOtherObjectInArray =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "TheOtherObjectInArray", type_ids_TheOtherObjectInArray);
                        if (return_code_TheOtherObjectInArray != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "TheOtherObjectInArray: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
                            return;
                        }
                    }
                }
                TypeIdentifier* element_identifier_anonymous_array_TheOtherObjectInArray_5 {nullptr};
                if (EK_COMPLETE == type_ids_basic_array_struct.type_identifier1()._d() || TK_NONE == type_ids_basic_array_struct.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_basic_array_struct.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_basic_array_struct.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_basic_array_struct.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_basic_array_struct.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids_basic_array_struct.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_basic_array_struct.type_identifier1().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids_basic_array_struct.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_basic_array_struct.type_identifier1().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids_basic_array_struct.type_identifier1()._d() &&
                        (EK_COMPLETE == type_ids_basic_array_struct.type_identifier1().map_sdefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_basic_array_struct.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                        (TI_PLAIN_MAP_LARGE == type_ids_basic_array_struct.type_identifier1()._d() &&
                        (EK_COMPLETE == type_ids_basic_array_struct.type_identifier1().map_ldefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_basic_array_struct.type_identifier1().map_ldefn().key_identifier()->_d())))
                {
                    element_identifier_anonymous_array_TheOtherObjectInArray_5 = new TypeIdentifier(type_ids_basic_array_struct.type_identifier1());
                }
                else if (EK_COMPLETE == type_ids_basic_array_struct.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_basic_array_struct.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_basic_array_struct.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_basic_array_struct.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_basic_array_struct.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids_basic_array_struct.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_basic_array_struct.type_identifier2().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids_basic_array_struct.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_basic_array_struct.type_identifier2().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids_basic_array_struct.type_identifier2()._d() &&
                        (EK_COMPLETE == type_ids_basic_array_struct.type_identifier2().map_sdefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_basic_array_struct.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                        (TI_PLAIN_MAP_LARGE == type_ids_basic_array_struct.type_identifier2()._d() &&
                        (EK_COMPLETE == type_ids_basic_array_struct.type_identifier2().map_ldefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_basic_array_struct.type_identifier2().map_ldefn().key_identifier()->_d())))
                {
                    element_identifier_anonymous_array_TheOtherObjectInArray_5 = new TypeIdentifier(type_ids_basic_array_struct.type_identifier2());
                }
                else
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Array element TypeIdentifier inconsistent.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_array_TheOtherObjectInArray_5 = EK_COMPLETE;
                if (TK_NONE == type_ids_basic_array_struct.type_identifier2()._d())
                {
                    equiv_kind_anonymous_array_TheOtherObjectInArray_5 = EK_BOTH;
                }
                CollectionElementFlag element_flags_anonymous_array_TheOtherObjectInArray_5 = 0;
                PlainCollectionHeader header_anonymous_array_TheOtherObjectInArray_5 = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_array_TheOtherObjectInArray_5, element_flags_anonymous_array_TheOtherObjectInArray_5);
                std::string type_id_kind_anonymous_array_TheOtherObjectInArray_5("TI_PLAIN_ARRAY_SMALL");
                if (type_id_kind_anonymous_array_TheOtherObjectInArray_5 == "TI_PLAIN_ARRAY_SMALL")
                {
                    SBoundSeq array_bound_seq;
                        TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<SBound>(5));

                    PlainArraySElemDefn array_sdefn = TypeObjectUtils::build_plain_array_s_elem_defn(header_anonymous_array_TheOtherObjectInArray_5, array_bound_seq,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_array_TheOtherObjectInArray_5));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_array_type_identifier(array_sdefn, "anonymous_array_TheOtherObjectInArray_5"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_array_TheOtherObjectInArray_5 already registered in TypeObjectRegistry for a different type.");
                    }
                }
                else
                {
                    LBoundSeq array_bound_seq;
                        TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<LBound>(5));

                    PlainArrayLElemDefn array_ldefn = TypeObjectUtils::build_plain_array_l_elem_defn(header_anonymous_array_TheOtherObjectInArray_5, array_bound_seq,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_array_TheOtherObjectInArray_5));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_l_array_type_identifier(array_ldefn, "anonymous_array_TheOtherObjectInArray_5"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_array_TheOtherObjectInArray_5 already registered in TypeObjectRegistry for a different type.");
                    }
                }
                return_code_basic_array_struct =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_array_TheOtherObjectInArray_5", type_ids_basic_array_struct);
                if (return_code_basic_array_struct != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_array_TheOtherObjectInArray_5: Given Array TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
            }
            StructMemberFlag member_flags_sub_structs = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_sub_structs;
            MemberId member_id_sub_structs = 0x00000001;
            if (EK_COMPLETE == type_ids_basic_array_struct.type_identifier1()._d() || TK_NONE == type_ids_basic_array_struct.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_basic_array_struct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_basic_array_struct.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_basic_array_struct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_basic_array_struct.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_basic_array_struct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_basic_array_struct.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_basic_array_struct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_basic_array_struct.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_basic_array_struct.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_basic_array_struct.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_basic_array_struct.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_basic_array_struct.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_basic_array_struct.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_basic_array_struct.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_sub_structs = TypeObjectUtils::build_common_struct_member(member_id_sub_structs, member_flags_sub_structs, type_ids_basic_array_struct.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_basic_array_struct.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_basic_array_struct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_basic_array_struct.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_basic_array_struct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_basic_array_struct.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_basic_array_struct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_basic_array_struct.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_basic_array_struct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_basic_array_struct.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_basic_array_struct.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_basic_array_struct.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_basic_array_struct.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_basic_array_struct.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_basic_array_struct.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_basic_array_struct.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_sub_structs = TypeObjectUtils::build_common_struct_member(member_id_sub_structs, member_flags_sub_structs, type_ids_basic_array_struct.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure sub_structs member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_sub_structs = "sub_structs";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_sub_structs;
            ann_custom_basic_array_struct.reset();
            CompleteMemberDetail detail_sub_structs = TypeObjectUtils::build_complete_member_detail(name_sub_structs, member_ann_builtin_sub_structs, ann_custom_basic_array_struct);
            CompleteStructMember member_sub_structs = TypeObjectUtils::build_complete_struct_member(common_sub_structs, detail_sub_structs);
            TypeObjectUtils::add_complete_struct_member(member_seq_basic_array_struct, member_sub_structs);
        }
        CompleteStructType struct_type_basic_array_struct = TypeObjectUtils::build_complete_struct_type(struct_flags_basic_array_struct, header_basic_array_struct, member_seq_basic_array_struct);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_basic_array_struct, type_name_basic_array_struct.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "basic_array_struct already registered in TypeObjectRegistry for a different type.");
        }
        return_code_basic_array_struct =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "basic_array_struct", type_ids_basic_array_struct);
        if (return_code_basic_array_struct != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "basic_array_struct: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}

