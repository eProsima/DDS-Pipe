// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file basic_array_structTypeObject.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace { char dummy; }
#endif

#include "basic_array_struct.h"
#include "basic_array_structTypeObject.h"
#include <mutex>
#include <utility>
#include <sstream>
#include <fastdds/rtps/common/CdrSerialization.hpp>
#include <fastrtps/rtps/common/SerializedPayload.h>
#include <fastrtps/utils/md5.h>
#include <fastrtps/types/TypeObjectFactory.h>
#include <fastrtps/types/TypeNamesGenerator.h>
#include <fastrtps/types/AnnotationParameterValue.h>

using namespace eprosima::fastrtps::rtps;

void registerbasic_array_structTypes()
{
    static std::once_flag once_flag;
    std::call_once(once_flag, []()
            {
                TypeObjectFactory *factory = TypeObjectFactory::get_instance();
                factory->add_type_object("TheOtherObjectInArray", GetTheOtherObjectInArrayIdentifier(true),
                GetTheOtherObjectInArrayObject(true));
                factory->add_type_object("TheOtherObjectInArray", GetTheOtherObjectInArrayIdentifier(false),
                GetTheOtherObjectInArrayObject(false));


                factory->add_type_object("basic_array_struct", Getbasic_array_structIdentifier(true),
                Getbasic_array_structObject(true));
                factory->add_type_object("basic_array_struct", Getbasic_array_structIdentifier(false),
                Getbasic_array_structObject(false));

            });
}



const TypeIdentifier* GetTheOtherObjectInArrayIdentifier(bool complete)
{
    const TypeIdentifier * c_identifier = TypeObjectFactory::get_instance()->get_type_identifier("TheOtherObjectInArray", complete);
    if (c_identifier != nullptr && (!complete || c_identifier->_d() == EK_COMPLETE))
    {
        return c_identifier;
    }

    GetTheOtherObjectInArrayObject(complete); // Generated inside
    return TypeObjectFactory::get_instance()->get_type_identifier("TheOtherObjectInArray", complete);
}

const TypeObject* GetTheOtherObjectInArrayObject(bool complete)
{
    const TypeObject* c_type_object = TypeObjectFactory::get_instance()->get_type_object("TheOtherObjectInArray", complete);
    if (c_type_object != nullptr)
    {
        return c_type_object;
    }
    else if (complete)
    {
        return GetCompleteTheOtherObjectInArrayObject();
    }
    //else
    return GetMinimalTheOtherObjectInArrayObject();
}

const TypeObject* GetMinimalTheOtherObjectInArrayObject()
{
    const TypeObject* c_type_object = TypeObjectFactory::get_instance()->get_type_object("TheOtherObjectInArray", false);
    if (c_type_object != nullptr)
    {
        return c_type_object;
    }

    TypeObject *type_object = new TypeObject();
    type_object->_d(EK_MINIMAL);
    type_object->minimal()._d(TK_STRUCTURE);

    type_object->minimal().struct_type().struct_flags().IS_FINAL(false);
    type_object->minimal().struct_type().struct_flags().IS_APPENDABLE(false);
    type_object->minimal().struct_type().struct_flags().IS_MUTABLE(false);
    type_object->minimal().struct_type().struct_flags().IS_NESTED(false);
    type_object->minimal().struct_type().struct_flags().IS_AUTOID_HASH(false); // Unsupported

    MemberId memberId = 0;
    MinimalStructMember mst_some_num;
    mst_some_num.common().member_id(memberId++);
    mst_some_num.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    mst_some_num.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    mst_some_num.common().member_flags().IS_EXTERNAL(false); // Unsupported
    mst_some_num.common().member_flags().IS_OPTIONAL(false);
    mst_some_num.common().member_flags().IS_MUST_UNDERSTAND(false);
    mst_some_num.common().member_flags().IS_KEY(false);
    mst_some_num.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    mst_some_num.common().member_type_id(*TypeObjectFactory::get_instance()->get_type_identifier("int32_t", false));


    MD5 some_num_hash("some_num");
    for(int i = 0; i < 4; ++i)
    {
        mst_some_num.detail().name_hash()[i] = some_num_hash.digest[i];
    }
    type_object->minimal().struct_type().member_seq().emplace_back(mst_some_num);

    MinimalStructMember mst_positive;
    mst_positive.common().member_id(memberId++);
    mst_positive.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    mst_positive.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    mst_positive.common().member_flags().IS_EXTERNAL(false); // Unsupported
    mst_positive.common().member_flags().IS_OPTIONAL(false);
    mst_positive.common().member_flags().IS_MUST_UNDERSTAND(false);
    mst_positive.common().member_flags().IS_KEY(false);
    mst_positive.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    mst_positive.common().member_type_id(*TypeObjectFactory::get_instance()->get_type_identifier("bool", false));


    MD5 positive_hash("positive");
    for(int i = 0; i < 4; ++i)
    {
        mst_positive.detail().name_hash()[i] = positive_hash.digest[i];
    }
    type_object->minimal().struct_type().member_seq().emplace_back(mst_positive);


    // Header
    // TODO Inheritance
    //type_object->minimal().struct_type().header().base_type()._d(EK_MINIMAL);
    //type_object->minimal().struct_type().header().base_type().equivalence_hash()[0..13];
    TypeIdentifier identifier;
    identifier._d(EK_MINIMAL);

    eprosima::fastcdr::CdrSizeCalculator calculator(eprosima::fastcdr::CdrVersion::XCDRv1);
    size_t current_alignment {0};
    SerializedPayload_t payload(static_cast<uint32_t>(
        calculator.calculate_serialized_size(type_object->minimal().struct_type(), current_alignment) + 4));
    eprosima::fastcdr::FastBuffer fastbuffer((char*) payload.data, payload.max_size);
    // Fixed endian (Page 221, EquivalenceHash definition of Extensible and Dynamic Topic Types for DDS document)
    eprosima::fastcdr::Cdr ser(
        fastbuffer, eprosima::fastcdr::Cdr::LITTLE_ENDIANNESS,
        eprosima::fastcdr::CdrVersion::XCDRv1); // Object that serializes the data.
    payload.encapsulation = ser.endianness() == eprosima::fastcdr::Cdr::BIG_ENDIANNESS ? CDR_BE : CDR_LE;

    ser << *type_object;
#if FASTCDR_VERSION_MAJOR == 1
    payload.length = (uint32_t)ser.getSerializedDataLength(); //Get the serialized length
#else
    payload.length = (uint32_t)ser.get_serialized_data_length(); //Get the serialized length
#endif // FASTCDR_VERSION_MAJOR == 1
    MD5 objectHash;
    objectHash.update((char*)payload.data, payload.length);
    objectHash.finalize();
    for(int i = 0; i < 14; ++i)
    {
        identifier.equivalence_hash()[i] = objectHash.digest[i];
    }

    TypeObjectFactory::get_instance()->add_type_object("TheOtherObjectInArray", &identifier, type_object);
    delete type_object;
    return TypeObjectFactory::get_instance()->get_type_object("TheOtherObjectInArray", false);
}

const TypeObject* GetCompleteTheOtherObjectInArrayObject()
{
    const TypeObject* c_type_object = TypeObjectFactory::get_instance()->get_type_object("TheOtherObjectInArray", true);
    if (c_type_object != nullptr && c_type_object->_d() == EK_COMPLETE)
    {
        return c_type_object;
    }

    TypeObject *type_object = new TypeObject();
    type_object->_d(EK_COMPLETE);
    type_object->complete()._d(TK_STRUCTURE);

    type_object->complete().struct_type().struct_flags().IS_FINAL(false);
    type_object->complete().struct_type().struct_flags().IS_APPENDABLE(false);
    type_object->complete().struct_type().struct_flags().IS_MUTABLE(false);
    type_object->complete().struct_type().struct_flags().IS_NESTED(false);
    type_object->complete().struct_type().struct_flags().IS_AUTOID_HASH(false); // Unsupported

    MemberId memberId = 0;
    CompleteStructMember cst_some_num;
    cst_some_num.common().member_id(memberId++);
    cst_some_num.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    cst_some_num.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    cst_some_num.common().member_flags().IS_EXTERNAL(false); // Unsupported
    cst_some_num.common().member_flags().IS_OPTIONAL(false);
    cst_some_num.common().member_flags().IS_MUST_UNDERSTAND(false);
    cst_some_num.common().member_flags().IS_KEY(false);
    cst_some_num.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    cst_some_num.common().member_type_id(*TypeObjectFactory::get_instance()->get_type_identifier("int32_t", false));


    cst_some_num.detail().name("some_num");

    type_object->complete().struct_type().member_seq().emplace_back(cst_some_num);

    CompleteStructMember cst_positive;
    cst_positive.common().member_id(memberId++);
    cst_positive.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    cst_positive.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    cst_positive.common().member_flags().IS_EXTERNAL(false); // Unsupported
    cst_positive.common().member_flags().IS_OPTIONAL(false);
    cst_positive.common().member_flags().IS_MUST_UNDERSTAND(false);
    cst_positive.common().member_flags().IS_KEY(false);
    cst_positive.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    cst_positive.common().member_type_id(*TypeObjectFactory::get_instance()->get_type_identifier("bool", false));


    cst_positive.detail().name("positive");

    type_object->complete().struct_type().member_seq().emplace_back(cst_positive);


    // Header
    type_object->complete().struct_type().header().detail().type_name("TheOtherObjectInArray");
    // TODO inheritance
    TypeIdentifier identifier;
    identifier._d(EK_COMPLETE);

    eprosima::fastcdr::CdrSizeCalculator calculator(eprosima::fastcdr::CdrVersion::XCDRv1);
    size_t current_alignment {0};
    SerializedPayload_t payload(static_cast<uint32_t>(
        calculator.calculate_serialized_size(type_object->complete().struct_type(), current_alignment) + 4));
    eprosima::fastcdr::FastBuffer fastbuffer((char*) payload.data, payload.max_size);
    // Fixed endian (Page 221, EquivalenceHash definition of Extensible and Dynamic Topic Types for DDS document)
    eprosima::fastcdr::Cdr ser(
        fastbuffer, eprosima::fastcdr::Cdr::LITTLE_ENDIANNESS,
        eprosima::fastcdr::CdrVersion::XCDRv1); // Object that serializes the data.
    payload.encapsulation = ser.endianness() == eprosima::fastcdr::Cdr::BIG_ENDIANNESS ? CDR_BE : CDR_LE;

    ser << *type_object;
#if FASTCDR_VERSION_MAJOR == 1
    payload.length = (uint32_t)ser.getSerializedDataLength(); //Get the serialized length
#else
    payload.length = (uint32_t)ser.get_serialized_data_length(); //Get the serialized length
#endif // FASTCDR_VERSION_MAJOR == 1
    MD5 objectHash;
    objectHash.update((char*)payload.data, payload.length);
    objectHash.finalize();
    for(int i = 0; i < 14; ++i)
    {
        identifier.equivalence_hash()[i] = objectHash.digest[i];
    }

    TypeObjectFactory::get_instance()->add_type_object("TheOtherObjectInArray", &identifier, type_object);
    delete type_object;
    return TypeObjectFactory::get_instance()->get_type_object("TheOtherObjectInArray", true);
}



const TypeIdentifier* Getbasic_array_structIdentifier(bool complete)
{
    const TypeIdentifier * c_identifier = TypeObjectFactory::get_instance()->get_type_identifier("basic_array_struct", complete);
    if (c_identifier != nullptr && (!complete || c_identifier->_d() == EK_COMPLETE))
    {
        return c_identifier;
    }

    Getbasic_array_structObject(complete); // Generated inside
    return TypeObjectFactory::get_instance()->get_type_identifier("basic_array_struct", complete);
}

const TypeObject* Getbasic_array_structObject(bool complete)
{
    const TypeObject* c_type_object = TypeObjectFactory::get_instance()->get_type_object("basic_array_struct", complete);
    if (c_type_object != nullptr)
    {
        return c_type_object;
    }
    else if (complete)
    {
        return GetCompletebasic_array_structObject();
    }
    //else
    return GetMinimalbasic_array_structObject();
}

const TypeObject* GetMinimalbasic_array_structObject()
{
    const TypeObject* c_type_object = TypeObjectFactory::get_instance()->get_type_object("basic_array_struct", false);
    if (c_type_object != nullptr)
    {
        return c_type_object;
    }

    TypeObject *type_object = new TypeObject();
    type_object->_d(EK_MINIMAL);
    type_object->minimal()._d(TK_STRUCTURE);

    type_object->minimal().struct_type().struct_flags().IS_FINAL(false);
    type_object->minimal().struct_type().struct_flags().IS_APPENDABLE(false);
    type_object->minimal().struct_type().struct_flags().IS_MUTABLE(false);
    type_object->minimal().struct_type().struct_flags().IS_NESTED(false);
    type_object->minimal().struct_type().struct_flags().IS_AUTOID_HASH(false); // Unsupported

    MemberId memberId = 0;
    MinimalStructMember mst_index;
    mst_index.common().member_id(memberId++);
    mst_index.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    mst_index.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    mst_index.common().member_flags().IS_EXTERNAL(false); // Unsupported
    mst_index.common().member_flags().IS_OPTIONAL(false);
    mst_index.common().member_flags().IS_MUST_UNDERSTAND(false);
    mst_index.common().member_flags().IS_KEY(false);
    mst_index.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    mst_index.common().member_type_id(*TypeObjectFactory::get_instance()->get_type_identifier("uint32_t", false));


    MD5 index_hash("index");
    for(int i = 0; i < 4; ++i)
    {
        mst_index.detail().name_hash()[i] = index_hash.digest[i];
    }
    type_object->minimal().struct_type().member_seq().emplace_back(mst_index);

    MinimalStructMember mst_sub_structs;
    mst_sub_structs.common().member_id(memberId++);
    mst_sub_structs.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    mst_sub_structs.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    mst_sub_structs.common().member_flags().IS_EXTERNAL(false); // Unsupported
    mst_sub_structs.common().member_flags().IS_OPTIONAL(false);
    mst_sub_structs.common().member_flags().IS_MUST_UNDERSTAND(false);
    mst_sub_structs.common().member_flags().IS_KEY(false);
    mst_sub_structs.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    mst_sub_structs.common().member_type_id(*TypeObjectFactory::get_instance()->get_array_identifier("TheOtherObjectInArray", {5}, false));

    MD5 sub_structs_hash("sub_structs");
    for(int i = 0; i < 4; ++i)
    {
        mst_sub_structs.detail().name_hash()[i] = sub_structs_hash.digest[i];
    }
    type_object->minimal().struct_type().member_seq().emplace_back(mst_sub_structs);


    // Header
    // TODO Inheritance
    //type_object->minimal().struct_type().header().base_type()._d(EK_MINIMAL);
    //type_object->minimal().struct_type().header().base_type().equivalence_hash()[0..13];
    TypeIdentifier identifier;
    identifier._d(EK_MINIMAL);

    eprosima::fastcdr::CdrSizeCalculator calculator(eprosima::fastcdr::CdrVersion::XCDRv1);
    size_t current_alignment {0};
    SerializedPayload_t payload(static_cast<uint32_t>(
        calculator.calculate_serialized_size(type_object->minimal().struct_type(), current_alignment) + 4));
    eprosima::fastcdr::FastBuffer fastbuffer((char*) payload.data, payload.max_size);
    // Fixed endian (Page 221, EquivalenceHash definition of Extensible and Dynamic Topic Types for DDS document)
    eprosima::fastcdr::Cdr ser(
        fastbuffer, eprosima::fastcdr::Cdr::LITTLE_ENDIANNESS,
        eprosima::fastcdr::CdrVersion::XCDRv1); // Object that serializes the data.
    payload.encapsulation = ser.endianness() == eprosima::fastcdr::Cdr::BIG_ENDIANNESS ? CDR_BE : CDR_LE;

    ser << *type_object;
#if FASTCDR_VERSION_MAJOR == 1
    payload.length = (uint32_t)ser.getSerializedDataLength(); //Get the serialized length
#else
    payload.length = (uint32_t)ser.get_serialized_data_length(); //Get the serialized length
#endif // FASTCDR_VERSION_MAJOR == 1
    MD5 objectHash;
    objectHash.update((char*)payload.data, payload.length);
    objectHash.finalize();
    for(int i = 0; i < 14; ++i)
    {
        identifier.equivalence_hash()[i] = objectHash.digest[i];
    }

    TypeObjectFactory::get_instance()->add_type_object("basic_array_struct", &identifier, type_object);
    delete type_object;
    return TypeObjectFactory::get_instance()->get_type_object("basic_array_struct", false);
}

const TypeObject* GetCompletebasic_array_structObject()
{
    const TypeObject* c_type_object = TypeObjectFactory::get_instance()->get_type_object("basic_array_struct", true);
    if (c_type_object != nullptr && c_type_object->_d() == EK_COMPLETE)
    {
        return c_type_object;
    }

    TypeObject *type_object = new TypeObject();
    type_object->_d(EK_COMPLETE);
    type_object->complete()._d(TK_STRUCTURE);

    type_object->complete().struct_type().struct_flags().IS_FINAL(false);
    type_object->complete().struct_type().struct_flags().IS_APPENDABLE(false);
    type_object->complete().struct_type().struct_flags().IS_MUTABLE(false);
    type_object->complete().struct_type().struct_flags().IS_NESTED(false);
    type_object->complete().struct_type().struct_flags().IS_AUTOID_HASH(false); // Unsupported

    MemberId memberId = 0;
    CompleteStructMember cst_index;
    cst_index.common().member_id(memberId++);
    cst_index.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    cst_index.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    cst_index.common().member_flags().IS_EXTERNAL(false); // Unsupported
    cst_index.common().member_flags().IS_OPTIONAL(false);
    cst_index.common().member_flags().IS_MUST_UNDERSTAND(false);
    cst_index.common().member_flags().IS_KEY(false);
    cst_index.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    cst_index.common().member_type_id(*TypeObjectFactory::get_instance()->get_type_identifier("uint32_t", false));


    cst_index.detail().name("index");

    type_object->complete().struct_type().member_seq().emplace_back(cst_index);

    CompleteStructMember cst_sub_structs;
    cst_sub_structs.common().member_id(memberId++);
    cst_sub_structs.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    cst_sub_structs.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    cst_sub_structs.common().member_flags().IS_EXTERNAL(false); // Unsupported
    cst_sub_structs.common().member_flags().IS_OPTIONAL(false);
    cst_sub_structs.common().member_flags().IS_MUST_UNDERSTAND(false);
    cst_sub_structs.common().member_flags().IS_KEY(false);
    cst_sub_structs.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    cst_sub_structs.common().member_type_id(*TypeObjectFactory::get_instance()->get_array_identifier("TheOtherObjectInArray", {5}, true));

    cst_sub_structs.detail().name("sub_structs");

    type_object->complete().struct_type().member_seq().emplace_back(cst_sub_structs);


    // Header
    type_object->complete().struct_type().header().detail().type_name("basic_array_struct");
    // TODO inheritance
    TypeIdentifier identifier;
    identifier._d(EK_COMPLETE);

    eprosima::fastcdr::CdrSizeCalculator calculator(eprosima::fastcdr::CdrVersion::XCDRv1);
    size_t current_alignment {0};
    SerializedPayload_t payload(static_cast<uint32_t>(
        calculator.calculate_serialized_size(type_object->complete().struct_type(), current_alignment) + 4));
    eprosima::fastcdr::FastBuffer fastbuffer((char*) payload.data, payload.max_size);
    // Fixed endian (Page 221, EquivalenceHash definition of Extensible and Dynamic Topic Types for DDS document)
    eprosima::fastcdr::Cdr ser(
        fastbuffer, eprosima::fastcdr::Cdr::LITTLE_ENDIANNESS,
        eprosima::fastcdr::CdrVersion::XCDRv1); // Object that serializes the data.
    payload.encapsulation = ser.endianness() == eprosima::fastcdr::Cdr::BIG_ENDIANNESS ? CDR_BE : CDR_LE;

    ser << *type_object;
#if FASTCDR_VERSION_MAJOR == 1
    payload.length = (uint32_t)ser.getSerializedDataLength(); //Get the serialized length
#else
    payload.length = (uint32_t)ser.get_serialized_data_length(); //Get the serialized length
#endif // FASTCDR_VERSION_MAJOR == 1
    MD5 objectHash;
    objectHash.update((char*)payload.data, payload.length);
    objectHash.finalize();
    for(int i = 0; i < 14; ++i)
    {
        identifier.equivalence_hash()[i] = objectHash.digest[i];
    }

    TypeObjectFactory::get_instance()->add_type_object("basic_array_struct", &identifier, type_object);
    delete type_object;
    return TypeObjectFactory::get_instance()->get_type_object("basic_array_struct", true);
}
