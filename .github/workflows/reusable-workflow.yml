# Reusable workflow to run the following jobs:
#
#   - windows-multiplatform-tests
#     - [  windows-2019 | windows-2022 ]
#     - [ Debug | Release ]
#     - execute tests in different versions of windows with different build types
#
#   - ubuntu-multiplatform-tests
#     - [ ubuntu-22.04 | ubuntu-24.04 ]
#     - [ Debug | Release ]
#     - execute tests in different versions of ubuntu with different build types
#
#   - asan
#     - ubuntu-22.04
#     - execute tests with ASAN flag
#
#   - tsan
#     - ubuntu-22.04
#     - execute tests with TSAN flag
#
#   - clang
#     - ubuntu-22.04
#     - execute clang-tidy check
#
#   - coverage
#     - ubuntu-22.04
#     - execute test with coverage flag and upload results
#
#   - flaky
#     - ubuntu-22.04
#     - execute flaky tests
#
#   - docs
#     - ubuntu-22.04
#     - execute docs compile and tests
#
#   - uncrustify
#     - ubuntu-22.04
#     - test uncrustify
#
#   - python-linter
#     - ubuntu-22.04
#     - test python linter
#

name: test

on:

  workflow_call:
    inputs:

      custom_version_build:
        description: >
          Version of Fast DDS build from eProsima-CI.
        required: true
        type: string

      dependencies_artifact_postfix:
        description: >
          Postfix name to add to artifact name to download dependencies.
          This is use to download a specific artifact version from eProsima-CI.
        required: true
        default: '_nightly'
        type: string

      ref:
        description: >
          The branch or tag name to checkout.
        required: true
        type: string
        default: 'main'

env:
  code_packages_names: 'ddspipe_core ddspipe_yaml ddspipe_participants'

jobs:


#####################################################################
# TEST
  windows-multiplatform-tests:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        cmake_build_type:
          - Release
          - Debug
        os:
          - windows-2019
          - windows-2022
    env:
      workspace_dependencies: 'install'

    steps:

      - name: Sync repository
        uses: eProsima/eProsima-CI/external/checkout@v0
        with:
          path: src
          ref: ${{ inputs.ref }}

      - name: Download dependencies and install requirements
        uses: ./src/.github/actions/project_dependencies
        with:
          os: ${{ matrix.os }}
          cmake_build_type: ${{ matrix.cmake_build_type }}
          target_workspace: ${{ env.workspace_dependencies }}
          custom_version_build: ${{ inputs.custom_version_build }}
          dependencies_artifact_postfix: ${{ inputs.dependencies_artifact_postfix }}
          secret_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Compile with colcon
        uses: eProsima/eProsima-CI/multiplatform/colcon_build@v0
        with:
          colcon_meta_file: src/.github/workflows/configurations/${{ runner.os }}/colcon.meta
          colcon_build_args: '--packages-up-to ${{ env.code_packages_names }}'
          cmake_args: ' -DBUILD_TESTS=ON -DCMAKE_BUILD_TYPE=${{ matrix.cmake_build_type }}'
          workspace: '${{ github.workspace }}'
          workspace_dependencies: ${{ env.workspace_dependencies }}
          cmake_build_type: ${{ matrix.cmake_build_type }}

      - name: Run tests ddspipe_core
        uses: ./src/.github/actions/run-test-windows
        if: always()
        with:
          package_name: ddspipe_core
          cmake_build_type: ${{ matrix.cmake_build_type }}
          workspace_dependencies: ${{ env.workspace_dependencies }}

      - name: Run tests ddspipe_participants
        uses: ./src/.github/actions/run-test-windows
        if: always()
        with:
          package_name: ddspipe_participants
          cmake_build_type: ${{ matrix.cmake_build_type }}
          workspace_dependencies: ${{ env.workspace_dependencies }}

      - name: Run tests ddspipe_yaml
        uses: ./src/.github/actions/run-test-windows
        if: always()
        with:
          package_name: ddspipe_yaml
          cmake_build_type: ${{ matrix.cmake_build_type }}
          workspace_dependencies: ${{ env.workspace_dependencies }}

  ubuntu-multiplatform-tests:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        cmake_build_type:
          - Release
          - Debug
        os:
          - ubuntu-22.04
          - ubuntu-24.04

    steps:

      - name: Sync repository
        uses: eProsima/eProsima-CI/external/checkout@v0
        with:
          path: src
          ref: ${{ inputs.ref }}

      - name: Download dependencies and install requirements
        uses: ./src/.github/actions/project_dependencies
        with:
          os: ${{ matrix.os }}
          cmake_build_type: ${{ matrix.cmake_build_type }}
          custom_version_build: ${{ inputs.custom_version_build }}
          dependencies_artifact_postfix: ${{ inputs.dependencies_artifact_postfix }}
          secret_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Compile and run tests
        uses: eProsima/eProsima-CI/multiplatform/colcon_build_test@v0
        with:
          packages_names: ${{ env.code_packages_names }}
          cmake_args: -DBUILD_TESTS=ON -DCMAKE_BUILD_TYPE=${{ matrix.cmake_build_type }}
          workspace_dependencies: install
          ctest_args: --label-exclude "xfail"
          colcon_meta_file: src/.github/workflows/configurations/${{ runner.os }}/colcon.meta
          test_report_artifact: test_report${{ inputs.dependencies_artifact_postfix }}_${{ inputs.custom_version_build }}_${{ matrix.os }}_${{ matrix.cmake_build_type }}


#####################################################################
# ASAN

  asan:
    runs-on: ubuntu-22.04
    steps:

      - name: Sync repository
        uses: eProsima/eProsima-CI/external/checkout@v0
        with:
          path: src
          ref: ${{ inputs.ref }}

      - name: Download dependencies and install requirements
        uses: ./src/.github/actions/project_dependencies
        with:
          os: ubuntu-22.04
          cmake_build_type: Release
          custom_version_build: ${{ inputs.custom_version_build }}
          dependencies_artifact_postfix: ${{ inputs.dependencies_artifact_postfix }}
          secret_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Compile and run tests
        uses: eProsima/eProsima-CI/multiplatform/colcon_build_test@v0
        with:
          packages_names: ${{ env.code_packages_names }}
          cmake_args: -DBUILD_TESTS=ON -DASAN_BUILD=ON
          ctest_args: --label-exclude "xfail|xasan"
          workspace_dependencies: install
          cmake_build_type: Debug
          test_report_artifact: test_report_asan${{ inputs.dependencies_artifact_postfix }}_${{ inputs.custom_version_build }}


#####################################################################
# TSAN

  tsan:
    runs-on: ubuntu-22.04
    steps:

      - name: Sync repository
        uses: eProsima/eProsima-CI/external/checkout@v0
        with:
          path: src
          ref: ${{ inputs.ref }}

      - name: Download dependencies and install requirements
        uses: ./src/.github/actions/project_dependencies
        with:
          os: ubuntu-22.04
          cmake_build_type: Release
          custom_version_build: ${{ inputs.custom_version_build }}
          dependencies_artifact_postfix: ${{ inputs.dependencies_artifact_postfix }}
          secret_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Compile and run tests
        uses: eProsima/eProsima-CI/multiplatform/colcon_build_test@v0
        env:
          # GCC 11.3 (Ubuntu Jammy default) produces several false positives regarding timed synchronization protocols
          # These issues were fixed in GCC 12 so we upgrade to that version.
          CC: gcc-12
          CXX: g++-12
        with:
          packages_names: ${{ env.code_packages_names }}
          cmake_args: -DBUILD_TESTS=ON -DTSAN_BUILD=ON
          ctest_args: --label-exclude "xfail|xtsan"
          workspace_dependencies: install
          cmake_build_type: Debug
          test_report_artifact: test_report_tsan${{ inputs.dependencies_artifact_postfix }}_${{ inputs.custom_version_build }}


#####################################################################
# CLANG

  clang:
    runs-on: ubuntu-22.04
    steps:

      - name: Sync repository
        uses: eProsima/eProsima-CI/external/checkout@v0
        with:
          path: src
          ref: ${{ inputs.ref }}

      - name: Download dependencies and install requirements
        uses: ./src/.github/actions/project_dependencies
        with:
          os: ubuntu-22.04
          cmake_build_type: Release
          custom_version_build: ${{ inputs.custom_version_build }}
          dependencies_artifact_postfix: ${{ inputs.dependencies_artifact_postfix }}
          secret_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Compile and run tests
        uses: eProsima/eProsima-CI/multiplatform/clang_build_test@v0
        with:
          packages_names: ${{ env.code_packages_names }}
          workspace_dependencies: install


#####################################################################
# COVERAGE

  coverage:
    runs-on: ubuntu-22.04
    environment:
      name: codecov
    steps:

      - name: Sync repository
        uses: eProsima/eProsima-CI/external/checkout@v0
        with:
          path: src
          ref: ${{ inputs.ref }}

      - name: Download dependencies and install requirements
        uses: ./src/.github/actions/project_dependencies
        with:
          os: ubuntu-22.04
          cmake_build_type: Release
          custom_version_build: ${{ inputs.custom_version_build }}
          dependencies_artifact_postfix: ${{ inputs.dependencies_artifact_postfix }}
          secret_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Compile and run tests
        uses: eProsima/eProsima-CI/ubuntu/coverage_build_test_upload@v0
        with:
          packages_names: ${{ env.code_packages_names }}
          workspace_dependencies: install
          test_report_artifact: test_report_coverage${{ inputs.dependencies_artifact_postfix }}_${{ inputs.custom_version_build }}
          codecov_token: ${{ secrets.CODECOV_TOKEN }}
          codecov_fix_file_path: src/codecov.yml


#####################################################################
# FLAKY

  flaky:
    runs-on: ubuntu-22.04
    steps:

      - name: Sync repository
        uses: eProsima/eProsima-CI/external/checkout@v0
        with:
          path: src
          ref: ${{ inputs.ref }}

      - name: Download dependencies and install requirements
        uses: ./src/.github/actions/project_dependencies
        with:
          os: ubuntu-22.04
          cmake_build_type: Release
          custom_version_build: ${{ inputs.custom_version_build }}
          dependencies_artifact_postfix: ${{ inputs.dependencies_artifact_postfix }}
          secret_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Compile and run tests
        uses: eProsima/eProsima-CI/multiplatform/colcon_build_test@v0
        with:
          packages_names: ${{ env.code_packages_names }}
          cmake_args: -DBUILD_TESTS=ON
          cmake_build_type: Release
          workspace_dependencies: install
          ctest_args: --label-regex "xfail"
          colcon_meta_file: ./src/.github/workflows/configurations/${{ runner.os }}/colcon.meta
          test_report_artifact: test_report_flaky${{ inputs.dependencies_artifact_postfix }}_${{ inputs.custom_version_build }}


#####################################################################
# UNCRUSTIFY

  uncrustify:
    runs-on: ubuntu-22.04
    steps:

      - name: Uncrustify
        uses: eProsima/eProsima-CI/ubuntu/uncrustify@v0


#####################################################################
# PYTHON LINTER

  python-linter:
    runs-on: ubuntu-22.04
    steps:

      - name: Python Linter
        uses: eProsima/eProsima-CI/ubuntu/python_linter@v0
